
rgb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000fbe  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  00800104  00800104  00001056  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c0d  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000408  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fdf  00000000  00000000  000031eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000454  00000000  00000000  000041cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000073f  00000000  00000000  00004620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ec2  00000000  00000000  00004d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  00006c21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c1       	rjmp	.+708    	; 0x306 <__vector_16>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	fa 06       	cpc	r15, r26

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a4 e0       	ldi	r26, 0x04	; 4
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ab 3d       	cpi	r26, 0xDB	; 219
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ee eb       	ldi	r30, 0xBE	; 190
  b2:	ff e0       	ldi	r31, 0x0F	; 15
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a4 30       	cpi	r26, 0x04	; 4
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	ce e8       	ldi	r28, 0x8E	; 142
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <__do_global_ctors+0x14>
  ce:	22 97       	sbiw	r28, 0x02	; 2
  d0:	01 09       	sbc	r16, r1
  d2:	fe 01       	movw	r30, r28
  d4:	0b bf       	out	0x3b, r16	; 59
  d6:	b4 d6       	rcall	.+3432   	; 0xe40 <__tablejump_elpm__>
  d8:	cc 38       	cpi	r28, 0x8C	; 140
  da:	d1 07       	cpc	r29, r17
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 07       	cpc	r16, r24
  e0:	b1 f7       	brne	.-20     	; 0xce <__do_global_ctors+0xa>
  e2:	b8 d4       	rcall	.+2416   	; 0xa54 <main>
  e4:	6a c7       	rjmp	.+3796   	; 0xfba <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <_ZN7TLC5940C1Ev>:
	// basic parameter checking
	// check if led is inbounds
	if (led < (16 * TLC5940_N)) {
		// if value is out of bounds, set to max
		if (val < 4096) {
			gs[led] = val;
  e8:	fc 01       	movw	r30, r24
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	3f e3       	ldi	r19, 0x3F	; 63
  ee:	20 33       	cpi	r18, 0x30	; 48
  f0:	08 f4       	brcc	.+2      	; 0xf4 <_ZN7TLC5940C1Ev+0xc>
  f2:	30 83       	st	Z, r19
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	31 96       	adiw	r30, 0x01	; 1
  f8:	20 33       	cpi	r18, 0x30	; 48
  fa:	c9 f7       	brne	.-14     	; 0xee <_ZN7TLC5940C1Ev+0x6>
  fc:	fc 01       	movw	r30, r24
  fe:	f0 96       	adiw	r30, 0x30	; 48
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	20 33       	cpi	r18, 0x30	; 48
 104:	10 f4       	brcc	.+4      	; 0x10a <_ZN7TLC5940C1Ev+0x22>
 106:	11 82       	std	Z+1, r1	; 0x01
 108:	10 82       	st	Z, r1
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	32 96       	adiw	r30, 0x02	; 2
 10e:	20 33       	cpi	r18, 0x30	; 48
 110:	c1 f7       	brne	.-16     	; 0x102 <_ZN7TLC5940C1Ev+0x1a>
 112:	fc 01       	movw	r30, r24
 114:	e0 57       	subi	r30, 0x70	; 112
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	10 82       	st	Z, r1
 11a:	08 95       	ret

0000011c <_ZN7TLC59404initEv>:
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	8c 01       	movw	r16, r24
 126:	55 9a       	sbi	0x0a, 5	; 10
 128:	5d 98       	cbi	0x0b, 5	; 11
 12a:	24 9a       	sbi	0x04, 4	; 4
 12c:	2c 98       	cbi	0x05, 4	; 5
 12e:	3c 9a       	sbi	0x07, 4	; 7
 130:	44 98       	cbi	0x08, 4	; 8
 132:	56 9a       	sbi	0x0a, 6	; 10
 134:	5e 98       	cbi	0x0b, 6	; 11
 136:	23 9a       	sbi	0x04, 3	; 4
 138:	2b 98       	cbi	0x05, 3	; 5
 13a:	3f 9a       	sbi	0x07, 7	; 7
 13c:	47 9a       	sbi	0x08, 7	; 8
 13e:	47 9a       	sbi	0x08, 7	; 8
 140:	2b 9a       	sbi	0x05, 3	; 5
 142:	4f e1       	ldi	r20, 0x1F	; 31
 144:	51 e0       	ldi	r21, 0x01	; 1
 146:	c1 e0       	ldi	r28, 0x01	; 1
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	9a 01       	movw	r18, r20
 14c:	ab ea       	ldi	r26, 0xAB	; 171
 14e:	ba ea       	ldi	r27, 0xAA	; 170
 150:	68 d6       	rcall	.+3280   	; 0xe22 <__umulhisi3>
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	9c 01       	movw	r18, r24
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	82 0f       	add	r24, r18
 162:	93 1f       	adc	r25, r19
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	fa 01       	movw	r30, r20
 16a:	e8 1b       	sub	r30, r24
 16c:	f9 0b       	sbc	r31, r25
 16e:	ce 01       	movw	r24, r28
 170:	02 c0       	rjmp	.+4      	; 0x176 <_ZN7TLC59404initEv+0x5a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	ea 95       	dec	r30
 178:	e2 f7       	brpl	.-8      	; 0x172 <_ZN7TLC59404initEv+0x56>
 17a:	fc 01       	movw	r30, r24
 17c:	9a 01       	movw	r18, r20
 17e:	51 d6       	rcall	.+3234   	; 0xe22 <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	d8 01       	movw	r26, r16
 18a:	a8 0f       	add	r26, r24
 18c:	b9 1f       	adc	r27, r25
 18e:	8c 91       	ld	r24, X
 190:	e8 23       	and	r30, r24
 192:	11 f0       	breq	.+4      	; 0x198 <_ZN7TLC59404initEv+0x7c>
 194:	2b 9a       	sbi	0x05, 3	; 5
 196:	01 c0       	rjmp	.+2      	; 0x19a <_ZN7TLC59404initEv+0x7e>
 198:	2b 98       	cbi	0x05, 3	; 5
 19a:	2c 9a       	sbi	0x05, 4	; 5
 19c:	2c 98       	cbi	0x05, 4	; 5
 19e:	41 50       	subi	r20, 0x01	; 1
 1a0:	51 09       	sbc	r21, r1
 1a2:	98 f6       	brcc	.-90     	; 0x14a <_ZN7TLC59404initEv+0x2e>
 1a4:	44 9a       	sbi	0x08, 4	; 8
 1a6:	44 98       	cbi	0x08, 4	; 8
 1a8:	5e 98       	cbi	0x0b, 6	; 11
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <_ZN7TLC594011serialCycleEv>:
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
 1be:	fc 01       	movw	r30, r24
 1c0:	e0 57       	subi	r30, 0x70	; 112
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	09 f4       	brne	.+2      	; 0x1cc <_ZN7TLC594011serialCycleEv+0x18>
 1ca:	3f c0       	rjmp	.+126    	; 0x24a <_ZN7TLC594011serialCycleEv+0x96>
 1cc:	10 82       	st	Z, r1
 1ce:	4f e3       	ldi	r20, 0x3F	; 63
 1d0:	52 e0       	ldi	r21, 0x02	; 2
 1d2:	01 e0       	ldi	r16, 0x01	; 1
 1d4:	10 e0       	ldi	r17, 0x00	; 0
 1d6:	9a 01       	movw	r18, r20
 1d8:	ab ea       	ldi	r26, 0xAB	; 171
 1da:	ba ea       	ldi	r27, 0xAA	; 170
 1dc:	22 d6       	rcall	.+3140   	; 0xe22 <__umulhisi3>
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	9c 01       	movw	r18, r24
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	82 0f       	add	r24, r18
 1f2:	93 1f       	adc	r25, r19
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	fa 01       	movw	r30, r20
 1fe:	e8 1b       	sub	r30, r24
 200:	f9 0b       	sbc	r31, r25
 202:	c8 01       	movw	r24, r16
 204:	02 c0       	rjmp	.+4      	; 0x20a <_ZN7TLC594011serialCycleEv+0x56>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	ea 95       	dec	r30
 20c:	e2 f7       	brpl	.-8      	; 0x206 <_ZN7TLC594011serialCycleEv+0x52>
 20e:	fc 01       	movw	r30, r24
 210:	9a 01       	movw	r18, r20
 212:	07 d6       	rcall	.+3086   	; 0xe22 <__umulhisi3>
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	dc 01       	movw	r26, r24
 222:	58 96       	adiw	r26, 0x18	; 24
 224:	aa 0f       	add	r26, r26
 226:	bb 1f       	adc	r27, r27
 228:	ac 0f       	add	r26, r28
 22a:	bd 1f       	adc	r27, r29
 22c:	2d 91       	ld	r18, X+
 22e:	3c 91       	ld	r19, X
 230:	e2 23       	and	r30, r18
 232:	f3 23       	and	r31, r19
 234:	ef 2b       	or	r30, r31
 236:	11 f0       	breq	.+4      	; 0x23c <_ZN7TLC594011serialCycleEv+0x88>
 238:	2b 9a       	sbi	0x05, 3	; 5
 23a:	01 c0       	rjmp	.+2      	; 0x23e <_ZN7TLC594011serialCycleEv+0x8a>
 23c:	2b 98       	cbi	0x05, 3	; 5
 23e:	2c 9a       	sbi	0x05, 4	; 5
 240:	2c 98       	cbi	0x05, 4	; 5
 242:	41 50       	subi	r20, 0x01	; 1
 244:	51 09       	sbc	r21, r1
 246:	38 f6       	brcc	.-114    	; 0x1d6 <_ZN7TLC594011serialCycleEv+0x22>
 248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN7TLC594011serialCycleEv+0x9a>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	01 c0       	rjmp	.+2      	; 0x250 <_ZN7TLC594011serialCycleEv+0x9c>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <_ZN7TLC59409refreshGSEv>:
 25a:	5e 9a       	sbi	0x0b, 6	; 11
 25c:	47 9b       	sbis	0x08, 7	; 8
 25e:	03 c0       	rjmp	.+6      	; 0x266 <_ZN7TLC59409refreshGSEv+0xc>
 260:	47 98       	cbi	0x08, 7	; 8
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	01 c0       	rjmp	.+2      	; 0x268 <_ZN7TLC59409refreshGSEv+0xe>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 91 04 01 	lds	r19, 0x0104
 26c:	33 23       	and	r19, r19
 26e:	21 f0       	breq	.+8      	; 0x278 <_ZN7TLC59409refreshGSEv+0x1e>
 270:	10 92 04 01 	sts	0x0104, r1
 274:	44 9a       	sbi	0x08, 4	; 8
 276:	44 98       	cbi	0x08, 4	; 8
 278:	22 23       	and	r18, r18
 27a:	11 f0       	breq	.+4      	; 0x280 <_ZN7TLC59409refreshGSEv+0x26>
 27c:	2c 9a       	sbi	0x05, 4	; 5
 27e:	2c 98       	cbi	0x05, 4	; 5
 280:	5e 98       	cbi	0x0b, 6	; 11
 282:	98 df       	rcall	.-208    	; 0x1b4 <_ZN7TLC594011serialCycleEv>
 284:	80 93 04 01 	sts	0x0104, r24
 288:	08 95       	ret

0000028a <_Z5setupv>:
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 49 01 	sts	0x0149, r24
 290:	2a e4       	ldi	r18, 0x4A	; 74
 292:	31 e0       	ldi	r19, 0x01	; 1
 294:	8a e7       	ldi	r24, 0x7A	; 122
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	f9 01       	movw	r30, r18
 29a:	5f e3       	ldi	r21, 0x3F	; 63
 29c:	4e 2f       	mov	r20, r30
 29e:	42 1b       	sub	r20, r18
 2a0:	40 33       	cpi	r20, 0x30	; 48
 2a2:	08 f4       	brcc	.+2      	; 0x2a6 <_Z5setupv+0x1c>
 2a4:	50 83       	st	Z, r21
 2a6:	31 96       	adiw	r30, 0x01	; 1
 2a8:	e8 17       	cp	r30, r24
 2aa:	f9 07       	cpc	r31, r25
 2ac:	b9 f7       	brne	.-18     	; 0x29c <_Z5setupv+0x12>
 2ae:	8a e4       	ldi	r24, 0x4A	; 74
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	34 df       	rcall	.-408    	; 0x11c <_ZN7TLC59404initEv>
 2b4:	f8 94       	cli
 2b6:	a0 e8       	ldi	r26, 0x80	; 128
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	1c 92       	st	X, r1
 2bc:	e1 e8       	ldi	r30, 0x81	; 129
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	10 82       	st	Z, r1
 2c2:	10 92 82 00 	sts	0x0082, r1
 2c6:	10 92 6f 00 	sts	0x006F, r1
 2ca:	8c 91       	ld	r24, X
 2cc:	80 64       	ori	r24, 0x40	; 64
 2ce:	8c 93       	st	X, r24
 2d0:	8f e1       	ldi	r24, 0x1F	; 31
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 89 00 	sts	0x0089, r25
 2d8:	80 93 88 00 	sts	0x0088, r24
 2dc:	80 81       	ld	r24, Z
 2de:	89 60       	ori	r24, 0x09	; 9
 2e0:	80 83       	st	Z, r24
 2e2:	14 bc       	out	0x24, r1	; 36
 2e4:	15 bc       	out	0x25, r1	; 37
 2e6:	ee e6       	ldi	r30, 0x6E	; 110
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	10 82       	st	Z, r1
 2ec:	84 b5       	in	r24, 0x24	; 36
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	84 bd       	out	0x24, r24	; 36
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	87 bd       	out	0x27, r24	; 39
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	85 60       	ori	r24, 0x05	; 5
 2fa:	85 bd       	out	0x25, r24	; 37
 2fc:	80 81       	ld	r24, Z
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	80 83       	st	Z, r24
 302:	78 94       	sei
 304:	08 95       	ret

00000306 <__vector_16>:
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	0b b6       	in	r0, 0x3b	; 59
 312:	0f 92       	push	r0
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
 32c:	8a e4       	ldi	r24, 0x4A	; 74
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	94 df       	rcall	.-216    	; 0x25a <_ZN7TLC59409refreshGSEv>
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0b be       	out	0x3b, r0	; 59
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <_Z11set_led_offii>:
 358:	9c 01       	movw	r18, r24
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	82 0f       	add	r24, r18
 360:	93 1f       	adc	r25, r19
 362:	9b 01       	movw	r18, r22
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	62 0f       	add	r22, r18
 36a:	73 1f       	adc	r23, r19
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	86 0f       	add	r24, r22
 376:	97 1f       	adc	r25, r23
 378:	80 33       	cpi	r24, 0x30	; 48
 37a:	40 f4       	brcc	.+16     	; 0x38c <_Z11set_led_offii+0x34>
 37c:	fc 01       	movw	r30, r24
 37e:	ff 27       	eor	r31, r31
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	e6 58       	subi	r30, 0x86	; 134
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	11 82       	std	Z+1, r1	; 0x01
 38a:	10 82       	st	Z, r1
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	e8 0f       	add	r30, r24
 390:	e0 33       	cpi	r30, 0x30	; 48
 392:	38 f4       	brcc	.+14     	; 0x3a2 <_Z11set_led_offii+0x4a>
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	e6 58       	subi	r30, 0x86	; 134
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	11 82       	std	Z+1, r1	; 0x01
 3a0:	10 82       	st	Z, r1
 3a2:	8e 5f       	subi	r24, 0xFE	; 254
 3a4:	80 33       	cpi	r24, 0x30	; 48
 3a6:	40 f4       	brcc	.+16     	; 0x3b8 <_Z11set_led_offii+0x60>
 3a8:	e8 2f       	mov	r30, r24
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	e6 58       	subi	r30, 0x86	; 134
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	11 82       	std	Z+1, r1	; 0x01
 3b6:	10 82       	st	Z, r1
 3b8:	08 95       	ret

000003ba <_Z11set_led_redii>:
	tlc.setGS(pos+1,5000);
	tlc.setGS(pos+2,0);
}
void set_led_red(int i, int j)
{
	int pos = (i*3) + (12*j);
 3ba:	9c 01       	movw	r18, r24
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	82 0f       	add	r24, r18
 3c2:	93 1f       	adc	r25, r19
 3c4:	9b 01       	movw	r18, r22
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	62 0f       	add	r22, r18
 3cc:	73 1f       	adc	r23, r19
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	86 0f       	add	r24, r22
 3d8:	97 1f       	adc	r25, r23

// set the brightness of an individual led
void TLC5940::setGS(uint8_t led, uint16_t val) {
	// basic parameter checking
	// check if led is inbounds
	if (led < (16 * TLC5940_N)) {
 3da:	80 33       	cpi	r24, 0x30	; 48
 3dc:	50 f4       	brcc	.+20     	; 0x3f2 <_Z11set_led_redii+0x38>
		// if value is out of bounds, set to max
		if (val < 4096) {
			gs[led] = val;
		}
		else {
			gs[led] = 4095;
 3de:	fc 01       	movw	r30, r24
 3e0:	ff 27       	eor	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	e6 58       	subi	r30, 0x86	; 134
 3e8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	3f e0       	ldi	r19, 0x0F	; 15
 3ee:	31 83       	std	Z+1, r19	; 0x01
 3f0:	20 83       	st	Z, r18
}
void set_led_red(int i, int j)
{
	int pos = (i*3) + (12*j);
	tlc.setGS(pos,5000);
	tlc.setGS(pos+1,0);
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	e8 0f       	add	r30, r24

// set the brightness of an individual led
void TLC5940::setGS(uint8_t led, uint16_t val) {
	// basic parameter checking
	// check if led is inbounds
	if (led < (16 * TLC5940_N)) {
 3f6:	e0 33       	cpi	r30, 0x30	; 48
 3f8:	38 f4       	brcc	.+14     	; 0x408 <_Z11set_led_redii+0x4e>
		// if value is out of bounds, set to max
		if (val < 4096) {
			gs[led] = val;
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e6 58       	subi	r30, 0x86	; 134
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	11 82       	std	Z+1, r1	; 0x01
 406:	10 82       	st	Z, r1
void set_led_red(int i, int j)
{
	int pos = (i*3) + (12*j);
	tlc.setGS(pos,5000);
	tlc.setGS(pos+1,0);
	tlc.setGS(pos+2,0);
 408:	8e 5f       	subi	r24, 0xFE	; 254

// set the brightness of an individual led
void TLC5940::setGS(uint8_t led, uint16_t val) {
	// basic parameter checking
	// check if led is inbounds
	if (led < (16 * TLC5940_N)) {
 40a:	80 33       	cpi	r24, 0x30	; 48
 40c:	40 f4       	brcc	.+16     	; 0x41e <_Z11set_led_redii+0x64>
		// if value is out of bounds, set to max
		if (val < 4096) {
			gs[led] = val;
 40e:	e8 2f       	mov	r30, r24
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e6 58       	subi	r30, 0x86	; 134
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	11 82       	std	Z+1, r1	; 0x01
 41c:	10 82       	st	Z, r1
 41e:	08 95       	ret

00000420 <_Z13matrix_to_rgbb>:
}

/* MAIN LOOP for turning var GRID into specific colors onto the physical rgb led grid.
If game is lost, pass in X as 0, 1 if game is won, anything else to continue normal round
*/
void matrix_to_rgb(bool x) {
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
	//if grid is full, game is lost. Turn off all leds
	if (x == 0) {
 42c:	88 23       	and	r24, r24
 42e:	29 f0       	breq	.+10     	; 0x43a <_Z13matrix_to_rgbb+0x1a>
 430:	00 e0       	ldi	r16, 0x00	; 0
 432:	10 e0       	ldi	r17, 0x00	; 0
 434:	e1 2c       	mov	r14, r1
 436:	f1 2c       	mov	r15, r1
 438:	20 c0       	rjmp	.+64     	; 0x47a <_Z13matrix_to_rgbb+0x5a>
 43a:	00 e0       	ldi	r16, 0x00	; 0
 43c:	10 e0       	ldi	r17, 0x00	; 0
}

/* MAIN LOOP for turning var GRID into specific colors onto the physical rgb led grid.
If game is lost, pass in X as 0, 1 if game is won, anything else to continue normal round
*/
void matrix_to_rgb(bool x) {
 43e:	e1 2c       	mov	r14, r1
 440:	f1 2c       	mov	r15, r1
 442:	0c c0       	rjmp	.+24     	; 0x45c <_Z13matrix_to_rgbb+0x3c>
	//if grid is full, game is lost. Turn off all leds
	if (x == 0) {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				set_led_off(i,j);
 444:	be 01       	movw	r22, r28
 446:	c8 01       	movw	r24, r16
 448:	87 df       	rcall	.-242    	; 0x358 <_Z11set_led_offii>
*/
void matrix_to_rgb(bool x) {
	//if grid is full, game is lost. Turn off all leds
	if (x == 0) {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
 44a:	21 96       	adiw	r28, 0x01	; 1
 44c:	c4 30       	cpi	r28, 0x04	; 4
 44e:	d1 05       	cpc	r29, r1
 450:	c9 f7       	brne	.-14     	; 0x444 <_Z13matrix_to_rgbb+0x24>
If game is lost, pass in X as 0, 1 if game is won, anything else to continue normal round
*/
void matrix_to_rgb(bool x) {
	//if grid is full, game is lost. Turn off all leds
	if (x == 0) {
		for (int i = 0; i < 4; i++) {
 452:	0f 5f       	subi	r16, 0xFF	; 255
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	04 30       	cpi	r16, 0x04	; 4
 458:	11 05       	cpc	r17, r1
 45a:	91 f0       	breq	.+36     	; 0x480 <_Z13matrix_to_rgbb+0x60>
}

/* MAIN LOOP for turning var GRID into specific colors onto the physical rgb led grid.
If game is lost, pass in X as 0, 1 if game is won, anything else to continue normal round
*/
void matrix_to_rgb(bool x) {
 45c:	ce 2d       	mov	r28, r14
 45e:	df 2d       	mov	r29, r15
 460:	f1 cf       	rjmp	.-30     	; 0x444 <_Z13matrix_to_rgbb+0x24>
	}
	//if any number on the matrix is 2048, game is won, set everything to full red
	if (x == 1) {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				set_led_red(i,j);
 462:	be 01       	movw	r22, r28
 464:	c8 01       	movw	r24, r16
 466:	a9 df       	rcall	.-174    	; 0x3ba <_Z11set_led_redii>
		return;
	}
	//if any number on the matrix is 2048, game is won, set everything to full red
	if (x == 1) {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
 468:	21 96       	adiw	r28, 0x01	; 1
 46a:	c4 30       	cpi	r28, 0x04	; 4
 46c:	d1 05       	cpc	r29, r1
 46e:	c9 f7       	brne	.-14     	; 0x462 <_Z13matrix_to_rgbb+0x42>
		}
		return;
	}
	//if any number on the matrix is 2048, game is won, set everything to full red
	if (x == 1) {
		for (int i = 0; i < 4; i++) {
 470:	0f 5f       	subi	r16, 0xFF	; 255
 472:	1f 4f       	sbci	r17, 0xFF	; 255
 474:	04 30       	cpi	r16, 0x04	; 4
 476:	11 05       	cpc	r17, r1
 478:	19 f0       	breq	.+6      	; 0x480 <_Z13matrix_to_rgbb+0x60>
/* MAIN LOOP for turning var GRID into specific colors onto the physical rgb led grid.
If game is lost, pass in X as 0, 1 if game is won, anything else to continue normal round
*/
void matrix_to_rgb(bool x) {
	//if grid is full, game is lost. Turn off all leds
	if (x == 0) {
 47a:	ce 2d       	mov	r28, r14
 47c:	df 2d       	mov	r29, r15
 47e:	f1 cf       	rjmp	.-30     	; 0x462 <_Z13matrix_to_rgbb+0x42>
				set_led_purple(i,j);
			}
		}
	}
	tlc.update();
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	08 95       	ret

0000048e <_Z8checkWinv>:
int validmove = 0;
//checks if any value in the grid is 2048
//set flag validmove to 1 if true
void checkWin() {
 48e:	e9 e2       	ldi	r30, 0x29	; 41
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	29 e4       	ldi	r18, 0x49	; 73
 494:	31 e0       	ldi	r19, 0x01	; 1
 496:	12 c0       	rjmp	.+36     	; 0x4bc <_Z8checkWinv+0x2e>
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (grid[i][j] == 2048) {
 498:	16 96       	adiw	r26, 0x06	; 6
 49a:	8d 91       	ld	r24, X+
 49c:	9c 91       	ld	r25, X
 49e:	17 97       	sbiw	r26, 0x07	; 7
 4a0:	81 15       	cp	r24, r1
 4a2:	98 40       	sbci	r25, 0x08	; 8
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <_Z8checkWinv+0x26>
				wonGame = 1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	90 93 08 01 	sts	0x0108, r25
 4ae:	80 93 07 01 	sts	0x0107, r24
				return;
 4b2:	08 95       	ret
 4b4:	38 96       	adiw	r30, 0x08	; 8
}
int validmove = 0;
//checks if any value in the grid is 2048
//set flag validmove to 1 if true
void checkWin() {
	for (int i = 0; i < 4; i++) {
 4b6:	e2 17       	cp	r30, r18
 4b8:	f3 07       	cpc	r31, r19
 4ba:	89 f0       	breq	.+34     	; 0x4de <_Z8checkWinv+0x50>
 4bc:	df 01       	movw	r26, r30
		for (int j = 0; j < 4; j++) {
			if (grid[i][j] == 2048) {
 4be:	80 81       	ld	r24, Z
 4c0:	91 81       	ldd	r25, Z+1	; 0x01
 4c2:	81 15       	cp	r24, r1
 4c4:	98 40       	sbci	r25, 0x08	; 8
 4c6:	79 f3       	breq	.-34     	; 0x4a6 <_Z8checkWinv+0x18>
 4c8:	82 81       	ldd	r24, Z+2	; 0x02
 4ca:	93 81       	ldd	r25, Z+3	; 0x03
 4cc:	81 15       	cp	r24, r1
 4ce:	98 40       	sbci	r25, 0x08	; 8
 4d0:	51 f3       	breq	.-44     	; 0x4a6 <_Z8checkWinv+0x18>
 4d2:	84 81       	ldd	r24, Z+4	; 0x04
 4d4:	95 81       	ldd	r25, Z+5	; 0x05
 4d6:	81 15       	cp	r24, r1
 4d8:	98 40       	sbci	r25, 0x08	; 8
 4da:	f1 f6       	brne	.-68     	; 0x498 <_Z8checkWinv+0xa>
 4dc:	e4 cf       	rjmp	.-56     	; 0x4a6 <_Z8checkWinv+0x18>
 4de:	08 95       	ret

000004e0 <_Z14initializeGridv>:
		}
	}
}


void initializeGrid() {
 4e0:	e9 e2       	ldi	r30, 0x29	; 41
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	89 e4       	ldi	r24, 0x49	; 73
 4e6:	91 e0       	ldi	r25, 0x01	; 1
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			grid[i][j] = 0;
 4e8:	11 82       	std	Z+1, r1	; 0x01
 4ea:	10 82       	st	Z, r1
 4ec:	13 82       	std	Z+3, r1	; 0x03
 4ee:	12 82       	std	Z+2, r1	; 0x02
 4f0:	15 82       	std	Z+5, r1	; 0x05
 4f2:	14 82       	std	Z+4, r1	; 0x04
 4f4:	17 82       	std	Z+7, r1	; 0x07
 4f6:	16 82       	std	Z+6, r1	; 0x06
 4f8:	38 96       	adiw	r30, 0x08	; 8
	}
}


void initializeGrid() {
	for (int i = 0; i < 4; i++) {
 4fa:	e8 17       	cp	r30, r24
 4fc:	f9 07       	cpc	r31, r25
 4fe:	a1 f7       	brne	.-24     	; 0x4e8 <_Z14initializeGridv+0x8>
		for (int j = 0; j < 4; j++) {
			grid[i][j] = 0;
		}
	}
}
 500:	08 95       	ret

00000502 <_Z14shiftGridRightv>:

void shiftGridRight() {
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	30 e0       	ldi	r19, 0x00	; 0
}

void shiftGridRight() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
		for (unsigned int i = 0; i < 4; i++) {
 516:	d0 e0       	ldi	r29, 0x00	; 0
 518:	c0 e0       	ldi	r28, 0x00	; 0
 51a:	03 e0       	ldi	r16, 0x03	; 3
 51c:	10 e0       	ldi	r17, 0x00	; 0
			for (unsigned int j = 0; j < 3; j++) {
				if ((grid[i][j] != 0) && (grid[i][j+1] == 0)) {
					grid[i][j+1] = grid[i][j];
					grid[i][j] = 0;
					trigger = 1;
 51e:	ee 24       	eor	r14, r14
 520:	e3 94       	inc	r14
 522:	f1 2c       	mov	r15, r1
 524:	1b c0       	rjmp	.+54     	; 0x55c <_Z14shiftGridRightv+0x5a>
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 0; j < 3; j++) {
				if ((grid[i][j] != 0) && (grid[i][j+1] == 0)) {
 526:	41 91       	ld	r20, Z+
 528:	51 91       	ld	r21, Z+
 52a:	41 15       	cp	r20, r1
 52c:	51 05       	cpc	r21, r1
 52e:	61 f0       	breq	.+24     	; 0x548 <_Z14shiftGridRightv+0x46>
 530:	a0 81       	ld	r26, Z
 532:	b1 81       	ldd	r27, Z+1	; 0x01
 534:	ab 2b       	or	r26, r27
 536:	41 f4       	brne	.+16     	; 0x548 <_Z14shiftGridRightv+0x46>
					grid[i][j+1] = grid[i][j];
 538:	51 83       	std	Z+1, r21	; 0x01
 53a:	40 83       	st	Z, r20
 53c:	df 01       	movw	r26, r30
 53e:	12 97       	sbiw	r26, 0x02	; 2
					grid[i][j] = 0;
 540:	1d 92       	st	X+, r1
 542:	1c 92       	st	X, r1
					trigger = 1;
 544:	6e 2d       	mov	r22, r14
 546:	7f 2d       	mov	r23, r15
 548:	01 97       	sbiw	r24, 0x01	; 1
void shiftGridRight() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 0; j < 3; j++) {
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	61 f7       	brne	.-40     	; 0x526 <_Z14shiftGridRightv+0x24>

void shiftGridRight() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 54e:	2f 5f       	subi	r18, 0xFF	; 255
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	04 c0       	rjmp	.+8      	; 0x55c <_Z14shiftGridRightv+0x5a>
 554:	2d 2f       	mov	r18, r29
 556:	3c 2f       	mov	r19, r28
}

void shiftGridRight() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 558:	6d 2f       	mov	r22, r29
 55a:	7c 2f       	mov	r23, r28
		for (unsigned int i = 0; i < 4; i++) {
 55c:	24 30       	cpi	r18, 0x04	; 4
 55e:	31 05       	cpc	r19, r1
 560:	60 f4       	brcc	.+24     	; 0x57a <_Z14shiftGridRightv+0x78>
 562:	f9 01       	movw	r30, r18
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	e7 5d       	subi	r30, 0xD7	; 215
 572:	fe 4f       	sbci	r31, 0xFE	; 254
 574:	80 2f       	mov	r24, r16
 576:	91 2f       	mov	r25, r17
 578:	d6 cf       	rjmp	.-84     	; 0x526 <_Z14shiftGridRightv+0x24>
	}
}

void shiftGridRight() {
	unsigned int trigger = 0;
	do {
 57a:	67 2b       	or	r22, r23
 57c:	59 f7       	brne	.-42     	; 0x554 <_Z14shiftGridRightv+0x52>
				}
			}
		}
	}
	while (trigger != 0);
}
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	08 95       	ret

0000058c <_Z16combineGridRightv>:

void combineGridRight() {
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	69 e2       	ldi	r22, 0x29	; 41
 596:	71 e0       	ldi	r23, 0x01	; 1
 598:	c9 e4       	ldi	r28, 0x49	; 73
 59a:	d1 e0       	ldi	r29, 0x01	; 1
 59c:	00 e0       	ldi	r16, 0x00	; 0
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	1b c0       	rjmp	.+54     	; 0x5d8 <_Z16combineGridRightv+0x4c>
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 0; j < 3; j++) {
			if ((grid[i][j] == grid[i][j+1]) && (grid[i][j] != 0)) {
 5a2:	21 91       	ld	r18, Z+
 5a4:	31 91       	ld	r19, Z+
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	df 01       	movw	r26, r30
 5aa:	40 81       	ld	r20, Z
 5ac:	51 81       	ldd	r21, Z+1	; 0x01
 5ae:	24 17       	cp	r18, r20
 5b0:	35 07       	cpc	r19, r21
 5b2:	51 f4       	brne	.+20     	; 0x5c8 <_Z16combineGridRightv+0x3c>
 5b4:	21 15       	cp	r18, r1
 5b6:	31 05       	cpc	r19, r1
 5b8:	39 f0       	breq	.+14     	; 0x5c8 <_Z16combineGridRightv+0x3c>
				grid[i][j+1] = grid[i][j+1] * 2;
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	31 83       	std	Z+1, r19	; 0x01
 5c0:	20 83       	st	Z, r18
 5c2:	12 97       	sbiw	r26, 0x02	; 2
				grid[i][j] = 0;
 5c4:	1d 92       	st	X+, r1
 5c6:	1c 92       	st	X, r1
	while (trigger != 0);
}

void combineGridRight() {
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 0; j < 3; j++) {
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	91 05       	cpc	r25, r1
 5cc:	51 f7       	brne	.-44     	; 0x5a2 <_Z16combineGridRightv+0x16>
 5ce:	68 5f       	subi	r22, 0xF8	; 248
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	while (trigger != 0);
}

void combineGridRight() {
	for (unsigned int i = 0; i < 4; i++) {
 5d2:	6c 17       	cp	r22, r28
 5d4:	7d 07       	cpc	r23, r29
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <_Z16combineGridRightv+0x54>
		}
	}
	while (trigger != 0);
}

void combineGridRight() {
 5d8:	fb 01       	movw	r30, r22
 5da:	80 2f       	mov	r24, r16
 5dc:	91 2f       	mov	r25, r17
 5de:	e1 cf       	rjmp	.-62     	; 0x5a2 <_Z16combineGridRightv+0x16>
				grid[i][j+1] = grid[i][j+1] * 2;
				grid[i][j] = 0;
			}
		}
	}
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	08 95       	ret

000005ea <_Z13shiftGridLeftv>:

void shiftGridLeft() {
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
}

void shiftGridLeft() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
		for (unsigned int i = 0; i < 4; i++) {
 602:	00 e0       	ldi	r16, 0x00	; 0
 604:	10 e0       	ldi	r17, 0x00	; 0
 606:	0f 2e       	mov	r0, r31
 608:	f3 e0       	ldi	r31, 0x03	; 3
 60a:	ef 2e       	mov	r14, r31
 60c:	f0 2d       	mov	r31, r0
 60e:	f1 2c       	mov	r15, r1
			for (unsigned int j = 3; j > 0; j--) {
				if ((grid[i][j] != 0) && (grid[i][j-1] == 0)) {
					grid[i][j-1] = grid[i][j];
					grid[i][j] = 0;
					trigger = 1;
 610:	cc 24       	eor	r12, r12
 612:	c3 94       	inc	r12
 614:	d1 2c       	mov	r13, r1
 616:	1a c0       	rjmp	.+52     	; 0x64c <_Z13shiftGridLeftv+0x62>
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 3; j > 0; j--) {
				if ((grid[i][j] != 0) && (grid[i][j-1] == 0)) {
 618:	42 81       	ldd	r20, Z+2	; 0x02
 61a:	53 81       	ldd	r21, Z+3	; 0x03
 61c:	41 15       	cp	r20, r1
 61e:	51 05       	cpc	r21, r1
 620:	51 f0       	breq	.+20     	; 0x636 <_Z13shiftGridLeftv+0x4c>
 622:	c0 81       	ld	r28, Z
 624:	d1 81       	ldd	r29, Z+1	; 0x01
 626:	cd 2b       	or	r28, r29
 628:	31 f4       	brne	.+12     	; 0x636 <_Z13shiftGridLeftv+0x4c>
					grid[i][j-1] = grid[i][j];
 62a:	51 83       	std	Z+1, r21	; 0x01
 62c:	40 83       	st	Z, r20
					grid[i][j] = 0;
 62e:	13 82       	std	Z+3, r1	; 0x03
 630:	12 82       	std	Z+2, r1	; 0x02
					trigger = 1;
 632:	6c 2d       	mov	r22, r12
 634:	7d 2d       	mov	r23, r13
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	32 97       	sbiw	r30, 0x02	; 2
void shiftGridLeft() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 3; j > 0; j--) {
 63a:	00 97       	sbiw	r24, 0x00	; 0
 63c:	69 f7       	brne	.-38     	; 0x618 <_Z13shiftGridLeftv+0x2e>

void shiftGridLeft() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 63e:	2f 5f       	subi	r18, 0xFF	; 255
 640:	3f 4f       	sbci	r19, 0xFF	; 255
 642:	04 c0       	rjmp	.+8      	; 0x64c <_Z13shiftGridLeftv+0x62>
 644:	20 2f       	mov	r18, r16
 646:	31 2f       	mov	r19, r17
}

void shiftGridLeft() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 648:	60 2f       	mov	r22, r16
 64a:	71 2f       	mov	r23, r17
		for (unsigned int i = 0; i < 4; i++) {
 64c:	24 30       	cpi	r18, 0x04	; 4
 64e:	31 05       	cpc	r19, r1
 650:	60 f4       	brcc	.+24     	; 0x66a <_Z13shiftGridLeftv+0x80>
 652:	f9 01       	movw	r30, r18
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	e3 5d       	subi	r30, 0xD3	; 211
 662:	fe 4f       	sbci	r31, 0xFE	; 254
 664:	8e 2d       	mov	r24, r14
 666:	9f 2d       	mov	r25, r15
 668:	d7 cf       	rjmp	.-82     	; 0x618 <_Z13shiftGridLeftv+0x2e>
	}
}

void shiftGridLeft() {
	unsigned int trigger = 0;
	do {
 66a:	67 2b       	or	r22, r23
 66c:	59 f7       	brne	.-42     	; 0x644 <_Z13shiftGridLeftv+0x5a>
				}
			}
		}
	}
	while (trigger != 0);
}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	08 95       	ret

00000680 <_Z15combineGridLeftv>:

void combineGridLeft() {
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	69 e2       	ldi	r22, 0x29	; 41
 68e:	71 e0       	ldi	r23, 0x01	; 1
 690:	0f 2e       	mov	r0, r31
 692:	f9 e4       	ldi	r31, 0x49	; 73
 694:	ef 2e       	mov	r14, r31
 696:	f1 e0       	ldi	r31, 0x01	; 1
 698:	ff 2e       	mov	r15, r31
 69a:	f0 2d       	mov	r31, r0
 69c:	00 e0       	ldi	r16, 0x00	; 0
 69e:	10 e0       	ldi	r17, 0x00	; 0
 6a0:	1d c0       	rjmp	.+58     	; 0x6dc <_Z15combineGridLeftv+0x5c>
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 0; j < 3; j++) {
			if ((grid[i][j] == grid[i][j+1]) && (grid[i][j] != 0)) {
 6a2:	21 91       	ld	r18, Z+
 6a4:	31 91       	ld	r19, Z+
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	40 81       	ld	r20, Z
 6aa:	51 81       	ldd	r21, Z+1	; 0x01
 6ac:	24 17       	cp	r18, r20
 6ae:	35 07       	cpc	r19, r21
 6b0:	69 f4       	brne	.+26     	; 0x6cc <_Z15combineGridLeftv+0x4c>
 6b2:	21 15       	cp	r18, r1
 6b4:	31 05       	cpc	r19, r1
 6b6:	51 f0       	breq	.+20     	; 0x6cc <_Z15combineGridLeftv+0x4c>
 6b8:	af 01       	movw	r20, r30
 6ba:	42 50       	subi	r20, 0x02	; 2
 6bc:	51 09       	sbc	r21, r1
				grid[i][j] = grid[i][j] * 2;
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	ea 01       	movw	r28, r20
 6c4:	39 83       	std	Y+1, r19	; 0x01
 6c6:	28 83       	st	Y, r18
				grid[i][j+1] = 0;
 6c8:	11 82       	std	Z+1, r1	; 0x01
 6ca:	10 82       	st	Z, r1
	while (trigger != 0);
}

void combineGridLeft() {
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 0; j < 3; j++) {
 6cc:	83 30       	cpi	r24, 0x03	; 3
 6ce:	91 05       	cpc	r25, r1
 6d0:	41 f7       	brne	.-48     	; 0x6a2 <_Z15combineGridLeftv+0x22>
 6d2:	68 5f       	subi	r22, 0xF8	; 248
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	while (trigger != 0);
}

void combineGridLeft() {
	for (unsigned int i = 0; i < 4; i++) {
 6d6:	6e 15       	cp	r22, r14
 6d8:	7f 05       	cpc	r23, r15
 6da:	21 f0       	breq	.+8      	; 0x6e4 <_Z15combineGridLeftv+0x64>
		}
	}
	while (trigger != 0);
}

void combineGridLeft() {
 6dc:	fb 01       	movw	r30, r22
 6de:	80 2f       	mov	r24, r16
 6e0:	91 2f       	mov	r25, r17
 6e2:	df cf       	rjmp	.-66     	; 0x6a2 <_Z15combineGridLeftv+0x22>
				grid[i][j] = grid[i][j] * 2;
				grid[i][j+1] = 0;
			}
		}
	}
}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	08 95       	ret

000006f2 <_Z13shiftGridDownv>:


void shiftGridDown() {
 6f2:	cf 92       	push	r12
 6f4:	df 92       	push	r13
 6f6:	ef 92       	push	r14
 6f8:	ff 92       	push	r15
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0


void shiftGridDown() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	70 e0       	ldi	r23, 0x00	; 0
		for (unsigned int i = 0; i < 4; i++) {
 70a:	00 e0       	ldi	r16, 0x00	; 0
 70c:	10 e0       	ldi	r17, 0x00	; 0
 70e:	0f 2e       	mov	r0, r31
 710:	f3 e0       	ldi	r31, 0x03	; 3
 712:	ef 2e       	mov	r14, r31
 714:	f0 2d       	mov	r31, r0
 716:	f1 2c       	mov	r15, r1
			for (unsigned int j = 0; j < 3; j++) {
				if ((grid[j][i] != 0) && (grid[j+1][i] == 0)) {
					grid[j+1][i] = grid[j][i];
					grid[j][i] = 0;
					trigger = 1;
 718:	cc 24       	eor	r12, r12
 71a:	c3 94       	inc	r12
 71c:	d1 2c       	mov	r13, r1
 71e:	1a c0       	rjmp	.+52     	; 0x754 <_Z13shiftGridDownv+0x62>
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 0; j < 3; j++) {
				if ((grid[j][i] != 0) && (grid[j+1][i] == 0)) {
 720:	40 81       	ld	r20, Z
 722:	51 81       	ldd	r21, Z+1	; 0x01
 724:	41 15       	cp	r20, r1
 726:	51 05       	cpc	r21, r1
 728:	51 f0       	breq	.+20     	; 0x73e <_Z13shiftGridDownv+0x4c>
 72a:	c0 85       	ldd	r28, Z+8	; 0x08
 72c:	d1 85       	ldd	r29, Z+9	; 0x09
 72e:	cd 2b       	or	r28, r29
 730:	31 f4       	brne	.+12     	; 0x73e <_Z13shiftGridDownv+0x4c>
					grid[j+1][i] = grid[j][i];
 732:	51 87       	std	Z+9, r21	; 0x09
 734:	40 87       	std	Z+8, r20	; 0x08
					grid[j][i] = 0;
 736:	11 82       	std	Z+1, r1	; 0x01
 738:	10 82       	st	Z, r1
					trigger = 1;
 73a:	6c 2d       	mov	r22, r12
 73c:	7d 2d       	mov	r23, r13
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	38 96       	adiw	r30, 0x08	; 8
void shiftGridDown() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 0; j < 3; j++) {
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	69 f7       	brne	.-38     	; 0x720 <_Z13shiftGridDownv+0x2e>

void shiftGridDown() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 746:	2f 5f       	subi	r18, 0xFF	; 255
 748:	3f 4f       	sbci	r19, 0xFF	; 255
 74a:	04 c0       	rjmp	.+8      	; 0x754 <_Z13shiftGridDownv+0x62>
 74c:	20 2f       	mov	r18, r16
 74e:	31 2f       	mov	r19, r17


void shiftGridDown() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 750:	60 2f       	mov	r22, r16
 752:	71 2f       	mov	r23, r17
		for (unsigned int i = 0; i < 4; i++) {
 754:	24 30       	cpi	r18, 0x04	; 4
 756:	31 05       	cpc	r19, r1
 758:	40 f4       	brcc	.+16     	; 0x76a <_Z13shiftGridDownv+0x78>
 75a:	f9 01       	movw	r30, r18
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	e7 5d       	subi	r30, 0xD7	; 215
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	8e 2d       	mov	r24, r14
 766:	9f 2d       	mov	r25, r15
 768:	db cf       	rjmp	.-74     	; 0x720 <_Z13shiftGridDownv+0x2e>
}


void shiftGridDown() {
	unsigned int trigger = 0;
	do {
 76a:	67 2b       	or	r22, r23
 76c:	79 f7       	brne	.-34     	; 0x74c <_Z13shiftGridDownv+0x5a>
				}
			}
		}
	}
	while (trigger != 0);
}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	08 95       	ret

00000780 <_Z15combineGridDownv>:

void combineGridDown() {
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	69 e3       	ldi	r22, 0x39	; 57
 78a:	71 e0       	ldi	r23, 0x01	; 1
 78c:	c1 e4       	ldi	r28, 0x41	; 65
 78e:	d1 e0       	ldi	r29, 0x01	; 1
 790:	03 e0       	ldi	r16, 0x03	; 3
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <_Z15combineGridDownv+0x48>
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 3; j > 0; j--) {
			if ((grid[j][i] == grid[j-1][i]) && (grid[j][i] != 0)) {
 796:	20 85       	ldd	r18, Z+8	; 0x08
 798:	31 85       	ldd	r19, Z+9	; 0x09
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	40 81       	ld	r20, Z
 79e:	51 81       	ldd	r21, Z+1	; 0x01
 7a0:	24 17       	cp	r18, r20
 7a2:	35 07       	cpc	r19, r21
 7a4:	49 f4       	brne	.+18     	; 0x7b8 <_Z15combineGridDownv+0x38>
 7a6:	21 15       	cp	r18, r1
 7a8:	31 05       	cpc	r19, r1
 7aa:	31 f0       	breq	.+12     	; 0x7b8 <_Z15combineGridDownv+0x38>
				grid[j-1][i] = grid[j-1][i] * 2;
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	31 83       	std	Z+1, r19	; 0x01
 7b2:	20 83       	st	Z, r18
				grid[j][i] = 0;
 7b4:	11 86       	std	Z+9, r1	; 0x09
 7b6:	10 86       	std	Z+8, r1	; 0x08
 7b8:	38 97       	sbiw	r30, 0x08	; 8
	while (trigger != 0);
}

void combineGridDown() {
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 3; j > 0; j--) {
 7ba:	00 97       	sbiw	r24, 0x00	; 0
 7bc:	61 f7       	brne	.-40     	; 0x796 <_Z15combineGridDownv+0x16>
 7be:	6e 5f       	subi	r22, 0xFE	; 254
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	while (trigger != 0);
}

void combineGridDown() {
	for (unsigned int i = 0; i < 4; i++) {
 7c2:	6c 17       	cp	r22, r28
 7c4:	7d 07       	cpc	r23, r29
 7c6:	21 f0       	breq	.+8      	; 0x7d0 <_Z15combineGridDownv+0x50>
		}
	}
	while (trigger != 0);
}

void combineGridDown() {
 7c8:	fb 01       	movw	r30, r22
 7ca:	80 2f       	mov	r24, r16
 7cc:	91 2f       	mov	r25, r17
 7ce:	e3 cf       	rjmp	.-58     	; 0x796 <_Z15combineGridDownv+0x16>
				grid[j-1][i] = grid[j-1][i] * 2;
				grid[j][i] = 0;
			}
		}
	}
}
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	1f 91       	pop	r17
 7d6:	0f 91       	pop	r16
 7d8:	08 95       	ret

000007da <_Z11shiftGridUpv>:

void shiftGridUp() {
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 7ea:	20 e0       	ldi	r18, 0x00	; 0
 7ec:	30 e0       	ldi	r19, 0x00	; 0
}

void shiftGridUp() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	70 e0       	ldi	r23, 0x00	; 0
		for (unsigned int i = 0; i < 4; i++) {
 7f2:	00 e0       	ldi	r16, 0x00	; 0
 7f4:	10 e0       	ldi	r17, 0x00	; 0
 7f6:	0f 2e       	mov	r0, r31
 7f8:	f3 e0       	ldi	r31, 0x03	; 3
 7fa:	ef 2e       	mov	r14, r31
 7fc:	f0 2d       	mov	r31, r0
 7fe:	f1 2c       	mov	r15, r1
			for (unsigned int j = 3; j > 0; j--) {
				if ((grid[j][i] != 0) && (grid[j-1][i] == 0)) {
					grid[j-1][i] = grid[j][i];
					grid[j][i] = 0;
					trigger = 1;
 800:	cc 24       	eor	r12, r12
 802:	c3 94       	inc	r12
 804:	d1 2c       	mov	r13, r1
 806:	1a c0       	rjmp	.+52     	; 0x83c <_Z11shiftGridUpv+0x62>
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 3; j > 0; j--) {
				if ((grid[j][i] != 0) && (grid[j-1][i] == 0)) {
 808:	40 85       	ldd	r20, Z+8	; 0x08
 80a:	51 85       	ldd	r21, Z+9	; 0x09
 80c:	41 15       	cp	r20, r1
 80e:	51 05       	cpc	r21, r1
 810:	51 f0       	breq	.+20     	; 0x826 <_Z11shiftGridUpv+0x4c>
 812:	c0 81       	ld	r28, Z
 814:	d1 81       	ldd	r29, Z+1	; 0x01
 816:	cd 2b       	or	r28, r29
 818:	31 f4       	brne	.+12     	; 0x826 <_Z11shiftGridUpv+0x4c>
					grid[j-1][i] = grid[j][i];
 81a:	51 83       	std	Z+1, r21	; 0x01
 81c:	40 83       	st	Z, r20
					grid[j][i] = 0;
 81e:	11 86       	std	Z+9, r1	; 0x09
 820:	10 86       	std	Z+8, r1	; 0x08
					trigger = 1;
 822:	6c 2d       	mov	r22, r12
 824:	7d 2d       	mov	r23, r13
 826:	01 97       	sbiw	r24, 0x01	; 1
 828:	38 97       	sbiw	r30, 0x08	; 8
void shiftGridUp() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
			for (unsigned int j = 3; j > 0; j--) {
 82a:	00 97       	sbiw	r24, 0x00	; 0
 82c:	69 f7       	brne	.-38     	; 0x808 <_Z11shiftGridUpv+0x2e>

void shiftGridUp() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
		for (unsigned int i = 0; i < 4; i++) {
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	04 c0       	rjmp	.+8      	; 0x83c <_Z11shiftGridUpv+0x62>
 834:	20 2f       	mov	r18, r16
 836:	31 2f       	mov	r19, r17
}

void shiftGridUp() {
	unsigned int trigger = 0;
	do {
		trigger = 0;
 838:	60 2f       	mov	r22, r16
 83a:	71 2f       	mov	r23, r17
		for (unsigned int i = 0; i < 4; i++) {
 83c:	24 30       	cpi	r18, 0x04	; 4
 83e:	31 05       	cpc	r19, r1
 840:	40 f4       	brcc	.+16     	; 0x852 <_Z11shiftGridUpv+0x78>
 842:	f9 01       	movw	r30, r18
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	e7 5c       	subi	r30, 0xC7	; 199
 84a:	fe 4f       	sbci	r31, 0xFE	; 254
 84c:	8e 2d       	mov	r24, r14
 84e:	9f 2d       	mov	r25, r15
 850:	db cf       	rjmp	.-74     	; 0x808 <_Z11shiftGridUpv+0x2e>
	}
}

void shiftGridUp() {
	unsigned int trigger = 0;
	do {
 852:	67 2b       	or	r22, r23
 854:	79 f7       	brne	.-34     	; 0x834 <_Z11shiftGridUpv+0x5a>
				}
			}
		}
	}
	while (trigger != 0);
}
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	ff 90       	pop	r15
 860:	ef 90       	pop	r14
 862:	df 90       	pop	r13
 864:	cf 90       	pop	r12
 866:	08 95       	ret

00000868 <_Z13combineGridUpv>:

void combineGridUp() {
 868:	0f 93       	push	r16
 86a:	1f 93       	push	r17
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	69 e2       	ldi	r22, 0x29	; 41
 872:	71 e0       	ldi	r23, 0x01	; 1
 874:	c1 e3       	ldi	r28, 0x31	; 49
 876:	d1 e0       	ldi	r29, 0x01	; 1
 878:	00 e0       	ldi	r16, 0x00	; 0
 87a:	10 e0       	ldi	r17, 0x00	; 0
 87c:	1a c0       	rjmp	.+52     	; 0x8b2 <_Z13combineGridUpv+0x4a>
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 0; j < 3; j++) {
			if ((grid[j][i] == grid[j+1][i]) && (grid[j][i] != 0)) {
 87e:	20 81       	ld	r18, Z
 880:	31 81       	ldd	r19, Z+1	; 0x01
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	40 85       	ldd	r20, Z+8	; 0x08
 886:	51 85       	ldd	r21, Z+9	; 0x09
 888:	24 17       	cp	r18, r20
 88a:	35 07       	cpc	r19, r21
 88c:	49 f4       	brne	.+18     	; 0x8a0 <_Z13combineGridUpv+0x38>
 88e:	21 15       	cp	r18, r1
 890:	31 05       	cpc	r19, r1
 892:	31 f0       	breq	.+12     	; 0x8a0 <_Z13combineGridUpv+0x38>
				grid[j][i] = grid[j][i] * 2;
 894:	22 0f       	add	r18, r18
 896:	33 1f       	adc	r19, r19
 898:	31 83       	std	Z+1, r19	; 0x01
 89a:	20 83       	st	Z, r18
				grid[j+1][i] = 0;
 89c:	11 86       	std	Z+9, r1	; 0x09
 89e:	10 86       	std	Z+8, r1	; 0x08
 8a0:	38 96       	adiw	r30, 0x08	; 8
	while (trigger != 0);
}

void combineGridUp() {
	for (unsigned int i = 0; i < 4; i++) {
		for (unsigned int j = 0; j < 3; j++) {
 8a2:	83 30       	cpi	r24, 0x03	; 3
 8a4:	91 05       	cpc	r25, r1
 8a6:	59 f7       	brne	.-42     	; 0x87e <_Z13combineGridUpv+0x16>
 8a8:	6e 5f       	subi	r22, 0xFE	; 254
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	while (trigger != 0);
}

void combineGridUp() {
	for (unsigned int i = 0; i < 4; i++) {
 8ac:	6c 17       	cp	r22, r28
 8ae:	7d 07       	cpc	r23, r29
 8b0:	21 f0       	breq	.+8      	; 0x8ba <_Z13combineGridUpv+0x52>
		}
	}
	while (trigger != 0);
}

void combineGridUp() {
 8b2:	fb 01       	movw	r30, r22
 8b4:	80 2f       	mov	r24, r16
 8b6:	91 2f       	mov	r25, r17
 8b8:	e2 cf       	rjmp	.-60     	; 0x87e <_Z13combineGridUpv+0x16>
				grid[j][i] = grid[j][i] * 2;
				grid[j+1][i] = 0;
			}
		}
	}
}
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	08 95       	ret

000008c4 <_Z9pressLeftv>:

void pressLeft() {
	shiftGridLeft();
 8c4:	92 de       	rcall	.-732    	; 0x5ea <_Z13shiftGridLeftv>
	combineGridLeft();
 8c6:	dc de       	rcall	.-584    	; 0x680 <_Z15combineGridLeftv>
	shiftGridLeft();
 8c8:	90 ce       	rjmp	.-736    	; 0x5ea <_Z13shiftGridLeftv>
 8ca:	08 95       	ret

000008cc <_Z7pressUpv>:
}

void pressUp() {
	shiftGridUp();
 8cc:	86 df       	rcall	.-244    	; 0x7da <_Z11shiftGridUpv>
	combineGridUp();
 8ce:	cc df       	rcall	.-104    	; 0x868 <_Z13combineGridUpv>
	shiftGridUp();
 8d0:	84 cf       	rjmp	.-248    	; 0x7da <_Z11shiftGridUpv>
 8d2:	08 95       	ret

000008d4 <_Z9pressDownv>:
}

void pressDown() {
	shiftGridDown();
 8d4:	0e df       	rcall	.-484    	; 0x6f2 <_Z13shiftGridDownv>
	combineGridDown();
 8d6:	54 df       	rcall	.-344    	; 0x780 <_Z15combineGridDownv>
	shiftGridDown();
 8d8:	0c cf       	rjmp	.-488    	; 0x6f2 <_Z13shiftGridDownv>
 8da:	08 95       	ret

000008dc <_Z10pressRightv>:
}

void pressRight() {
	shiftGridRight();
 8dc:	12 de       	rcall	.-988    	; 0x502 <_Z14shiftGridRightv>
	combineGridRight();
 8de:	56 de       	rcall	.-852    	; 0x58c <_Z16combineGridRightv>
	shiftGridRight();
 8e0:	10 ce       	rjmp	.-992    	; 0x502 <_Z14shiftGridRightv>
 8e2:	08 95       	ret

000008e4 <_Z14generateRandomv>:
}

void generateRandom() {
 8e4:	6f 92       	push	r6
 8e6:	7f 92       	push	r7
 8e8:	8f 92       	push	r8
 8ea:	9f 92       	push	r9
 8ec:	af 92       	push	r10
 8ee:	bf 92       	push	r11
 8f0:	cf 92       	push	r12
 8f2:	df 92       	push	r13
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
		size = size - 4;
		i++;
	}
	j = size;
	grid[i][j] = 2;
}
 904:	ad b6       	in	r10, 0x3d	; 61
 906:	be b6       	in	r11, 0x3e	; 62
 908:	a9 e4       	ldi	r26, 0x49	; 73
 90a:	b1 e0       	ldi	r27, 0x01	; 1
 90c:	69 e2       	ldi	r22, 0x29	; 41
 90e:	71 e0       	ldi	r23, 0x01	; 1
	combineGridRight();
	shiftGridRight();
}

void generateRandom() {
	int size = 0;
 910:	40 e0       	ldi	r20, 0x00	; 0
 912:	50 e0       	ldi	r21, 0x00	; 0
	shiftGridRight();
	combineGridRight();
	shiftGridRight();
}

void generateRandom() {
 914:	04 e0       	ldi	r16, 0x04	; 4
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	0e c0       	rjmp	.+28     	; 0x936 <_Z14generateRandomv+0x52>
	int size = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (grid[i][j] == 0) {
 91a:	21 91       	ld	r18, Z+
 91c:	31 91       	ld	r19, Z+
 91e:	23 2b       	or	r18, r19
 920:	11 f4       	brne	.+4      	; 0x926 <_Z14generateRandomv+0x42>
				size++;
 922:	4f 5f       	subi	r20, 0xFF	; 255
 924:	5f 4f       	sbci	r21, 0xFF	; 255
 926:	01 97       	sbiw	r24, 0x01	; 1
}

void generateRandom() {
	int size = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
 928:	00 97       	sbiw	r24, 0x00	; 0
 92a:	b9 f7       	brne	.-18     	; 0x91a <_Z14generateRandomv+0x36>
 92c:	68 5f       	subi	r22, 0xF8	; 248
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
	shiftGridRight();
}

void generateRandom() {
	int size = 0;
	for (int i = 0; i < 4; i++) {
 930:	6a 17       	cp	r22, r26
 932:	7b 07       	cpc	r23, r27
 934:	21 f0       	breq	.+8      	; 0x93e <_Z14generateRandomv+0x5a>
	shiftGridRight();
	combineGridRight();
	shiftGridRight();
}

void generateRandom() {
 936:	fb 01       	movw	r30, r22
 938:	80 2f       	mov	r24, r16
 93a:	91 2f       	mov	r25, r17
 93c:	ee cf       	rjmp	.-36     	; 0x91a <_Z14generateRandomv+0x36>
			if (grid[i][j] == 0) {
				size++;
			}
		}
	}
	int arr[size];
 93e:	44 0f       	add	r20, r20
 940:	55 1f       	adc	r21, r21
 942:	6d b7       	in	r22, 0x3d	; 61
 944:	7e b7       	in	r23, 0x3e	; 62
 946:	64 1b       	sub	r22, r20
 948:	75 0b       	sbc	r23, r21
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	7e bf       	out	0x3e, r23	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	6d bf       	out	0x3d, r22	; 61
 954:	8d b7       	in	r24, 0x3d	; 61
 956:	9e b7       	in	r25, 0x3e	; 62
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	7c 01       	movw	r14, r24
 95c:	6c 01       	movw	r12, r24
 95e:	0f 2e       	mov	r0, r31
 960:	f9 e2       	ldi	r31, 0x29	; 41
 962:	6f 2e       	mov	r6, r31
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	7f 2e       	mov	r7, r31
 968:	f0 2d       	mov	r31, r0
	size = 0;
	int location = 0;
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	50 e0       	ldi	r21, 0x00	; 0
				size++;
			}
		}
	}
	int arr[size];
	size = 0;
 96e:	00 e0       	ldi	r16, 0x00	; 0
 970:	10 e0       	ldi	r17, 0x00	; 0
	combineGridRight();
	shiftGridRight();
}

void generateRandom() {
	int size = 0;
 972:	81 2c       	mov	r8, r1
 974:	91 2c       	mov	r9, r1
 976:	1d c0       	rjmp	.+58     	; 0x9b2 <_Z14generateRandomv+0xce>
 978:	bc 01       	movw	r22, r24
 97a:	64 0f       	add	r22, r20
 97c:	75 1f       	adc	r23, r21
	int arr[size];
	size = 0;
	int location = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (grid[i][j] == 0) {
 97e:	21 91       	ld	r18, Z+
 980:	31 91       	ld	r19, Z+
 982:	23 2b       	or	r18, r19
 984:	51 f4       	brne	.+20     	; 0x99a <_Z14generateRandomv+0xb6>
				arr[size] = location;
 986:	98 01       	movw	r18, r16
 988:	22 0f       	add	r18, r18
 98a:	33 1f       	adc	r19, r19
 98c:	2c 0d       	add	r18, r12
 98e:	3d 1d       	adc	r19, r13
 990:	d9 01       	movw	r26, r18
 992:	6d 93       	st	X+, r22
 994:	7c 93       	st	X, r23
				size++;
 996:	0f 5f       	subi	r16, 0xFF	; 255
 998:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	int arr[size];
	size = 0;
	int location = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	84 30       	cpi	r24, 0x04	; 4
 99e:	91 05       	cpc	r25, r1
 9a0:	59 f7       	brne	.-42     	; 0x978 <_Z14generateRandomv+0x94>
 9a2:	4c 5f       	subi	r20, 0xFC	; 252
 9a4:	5f 4f       	sbci	r21, 0xFF	; 255
 9a6:	b8 e0       	ldi	r27, 0x08	; 8
 9a8:	6b 0e       	add	r6, r27
 9aa:	71 1c       	adc	r7, r1
		}
	}
	int arr[size];
	size = 0;
	int location = 0;
	for (int i = 0; i < 4; i++) {
 9ac:	40 31       	cpi	r20, 0x10	; 16
 9ae:	51 05       	cpc	r21, r1
 9b0:	21 f0       	breq	.+8      	; 0x9ba <_Z14generateRandomv+0xd6>
	combineGridRight();
	shiftGridRight();
}

void generateRandom() {
	int size = 0;
 9b2:	f3 01       	movw	r30, r6
 9b4:	88 2d       	mov	r24, r8
 9b6:	99 2d       	mov	r25, r9
 9b8:	df cf       	rjmp	.-66     	; 0x978 <_Z14generateRandomv+0x94>
				size++;
			}
			location++;
		}
	}
	int read = rand() % size;
 9ba:	a3 d2       	rcall	.+1350   	; 0xf02 <rand>
 9bc:	b8 01       	movw	r22, r16
 9be:	1e d2       	rcall	.+1084   	; 0xdfc <__divmodhi4>
	size = arr[read];
 9c0:	88 0f       	add	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	f7 01       	movw	r30, r14
 9c6:	e8 0f       	add	r30, r24
 9c8:	f9 1f       	adc	r31, r25
 9ca:	20 81       	ld	r18, Z
 9cc:	31 81       	ldd	r19, Z+1	; 0x01
	int i = 0;
	int j = 0;
	while (size > 4) {
 9ce:	25 30       	cpi	r18, 0x05	; 5
 9d0:	31 05       	cpc	r19, r1
 9d2:	d4 f0       	brlt	.+52     	; 0xa08 <_Z14generateRandomv+0x124>
			}
			location++;
		}
	}
	int read = rand() % size;
	size = arr[read];
 9d4:	c9 01       	movw	r24, r18
	int i = 0;
	int j = 0;
	while (size > 4) {
		size = size - 4;
 9d6:	04 97       	sbiw	r24, 0x04	; 4
	}
	int read = rand() % size;
	size = arr[read];
	int i = 0;
	int j = 0;
	while (size > 4) {
 9d8:	85 30       	cpi	r24, 0x05	; 5
 9da:	91 05       	cpc	r25, r1
 9dc:	e4 f7       	brge	.-8      	; 0x9d6 <_Z14generateRandomv+0xf2>
 9de:	a9 01       	movw	r20, r18
 9e0:	44 50       	subi	r20, 0x04	; 4
 9e2:	51 09       	sbc	r21, r1
 9e4:	25 50       	subi	r18, 0x05	; 5
 9e6:	31 09       	sbc	r19, r1
 9e8:	c9 01       	movw	r24, r18
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	9c 01       	movw	r18, r24
 9f4:	22 0f       	add	r18, r18
 9f6:	33 1f       	adc	r19, r19
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	ba 01       	movw	r22, r20
 9fe:	62 1b       	sub	r22, r18
 a00:	73 0b       	sbc	r23, r19
 a02:	9b 01       	movw	r18, r22
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <_Z14generateRandomv+0x128>
			location++;
		}
	}
	int read = rand() % size;
	size = arr[read];
	int i = 0;
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	90 e0       	ldi	r25, 0x00	; 0
	while (size > 4) {
		size = size - 4;
		i++;
	}
	j = size;
	grid[i][j] = 2;
 a0c:	fc 01       	movw	r30, r24
 a0e:	ee 0f       	add	r30, r30
 a10:	ff 1f       	adc	r31, r31
 a12:	ee 0f       	add	r30, r30
 a14:	ff 1f       	adc	r31, r31
 a16:	2e 0f       	add	r18, r30
 a18:	3f 1f       	adc	r19, r31
 a1a:	f9 01       	movw	r30, r18
 a1c:	ee 0f       	add	r30, r30
 a1e:	ff 1f       	adc	r31, r31
 a20:	e7 5d       	subi	r30, 0xD7	; 215
 a22:	fe 4f       	sbci	r31, 0xFE	; 254
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	91 83       	std	Z+1, r25	; 0x01
 a2a:	80 83       	st	Z, r24
}
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	be be       	out	0x3e, r11	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	ad be       	out	0x3d, r10	; 61
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	1f 91       	pop	r17
 a3c:	0f 91       	pop	r16
 a3e:	ff 90       	pop	r15
 a40:	ef 90       	pop	r14
 a42:	df 90       	pop	r13
 a44:	cf 90       	pop	r12
 a46:	bf 90       	pop	r11
 a48:	af 90       	pop	r10
 a4a:	9f 90       	pop	r9
 a4c:	8f 90       	pop	r8
 a4e:	7f 90       	pop	r7
 a50:	6f 90       	pop	r6
 a52:	08 95       	ret

00000a54 <main>:

int main()
{
	DDRA = 0x00; PORTA = 0xFF;
 a54:	11 b8       	out	0x01, r1	; 1
 a56:	8f ef       	ldi	r24, 0xFF	; 255
 a58:	82 b9       	out	0x02, r24	; 2
	unsigned char buttonUp, buttonDown, buttonLeft, buttonRight, buttonReset;
	buttonUp = ~PINA & 0x01;
 a5a:	40 b1       	in	r20, 0x00	; 0
	buttonDown = ~PINA & 0x02;
 a5c:	30 b1       	in	r19, 0x00	; 0
 a5e:	30 95       	com	r19
 a60:	32 70       	andi	r19, 0x02	; 2
	buttonLeft = ~PINA & 0x04;
 a62:	90 b1       	in	r25, 0x00	; 0
 a64:	90 95       	com	r25
 a66:	94 70       	andi	r25, 0x04	; 4
	buttonRight = ~PINA & 0x08;
 a68:	20 b1       	in	r18, 0x00	; 0
 a6a:	20 95       	com	r18
 a6c:	28 70       	andi	r18, 0x08	; 8
	buttonReset = ~PINA & 0x10;
 a6e:	80 b1       	in	r24, 0x00	; 0
 a70:	80 95       	com	r24
 a72:	80 71       	andi	r24, 0x10	; 16
	while (!buttonUp && !buttonDown && !buttonRight && !buttonLeft && !buttonReset)
 a74:	40 ff       	sbrs	r20, 0
 a76:	1f c0       	rjmp	.+62     	; 0xab6 <main+0x62>
 a78:	31 11       	cpse	r19, r1
 a7a:	1d c0       	rjmp	.+58     	; 0xab6 <main+0x62>
 a7c:	21 11       	cpse	r18, r1
 a7e:	1b c0       	rjmp	.+54     	; 0xab6 <main+0x62>
 a80:	91 11       	cpse	r25, r1
 a82:	19 c0       	rjmp	.+50     	; 0xab6 <main+0x62>
 a84:	81 11       	cpse	r24, r1
 a86:	17 c0       	rjmp	.+46     	; 0xab6 <main+0x62>
	{
		buttonUp = ~PINA & 0x01;
 a88:	40 b1       	in	r20, 0x00	; 0
		buttonDown = ~PINA & 0x02;
 a8a:	30 b1       	in	r19, 0x00	; 0
 a8c:	30 95       	com	r19
 a8e:	32 70       	andi	r19, 0x02	; 2
		buttonLeft = ~PINA & 0x04;
 a90:	90 b1       	in	r25, 0x00	; 0
 a92:	90 95       	com	r25
 a94:	94 70       	andi	r25, 0x04	; 4
		buttonRight = ~PINA & 0x08;
 a96:	20 b1       	in	r18, 0x00	; 0
 a98:	20 95       	com	r18
 a9a:	28 70       	andi	r18, 0x08	; 8
		buttonReset = ~PINA & 0x10;
 a9c:	80 b1       	in	r24, 0x00	; 0
 a9e:	80 95       	com	r24
 aa0:	80 71       	andi	r24, 0x10	; 16
	buttonUp = ~PINA & 0x01;
	buttonDown = ~PINA & 0x02;
	buttonLeft = ~PINA & 0x04;
	buttonRight = ~PINA & 0x08;
	buttonReset = ~PINA & 0x10;
	while (!buttonUp && !buttonDown && !buttonRight && !buttonLeft && !buttonReset)
 aa2:	40 ff       	sbrs	r20, 0
 aa4:	08 c0       	rjmp	.+16     	; 0xab6 <main+0x62>
 aa6:	31 11       	cpse	r19, r1
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <main+0x62>
 aaa:	21 11       	cpse	r18, r1
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <main+0x62>
 aae:	91 11       	cpse	r25, r1
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <main+0x62>
 ab2:	88 23       	and	r24, r24
 ab4:	49 f3       	breq	.-46     	; 0xa88 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ab6:	2f e3       	ldi	r18, 0x3F	; 63
 ab8:	8d e0       	ldi	r24, 0x0D	; 13
 aba:	93 e0       	ldi	r25, 0x03	; 3
 abc:	21 50       	subi	r18, 0x01	; 1
 abe:	80 40       	sbci	r24, 0x00	; 0
 ac0:	90 40       	sbci	r25, 0x00	; 0
 ac2:	e1 f7       	brne	.-8      	; 0xabc <main+0x68>
 ac4:	00 c0       	rjmp	.+0      	; 0xac6 <main+0x72>
 ac6:	00 00       	nop
		buttonLeft = ~PINA & 0x04;
		buttonRight = ~PINA & 0x08;
		buttonReset = ~PINA & 0x10;
	}
	_delay_ms(1000);
	setup();
 ac8:	e0 db       	rcall	.-2112   	; 0x28a <_Z5setupv>
	initializeGrid();
 aca:	0a dd       	rcall	.-1516   	; 0x4e0 <_Z14initializeGridv>
	generateRandom();
 acc:	0b df       	rcall	.-490    	; 0x8e4 <_Z14generateRandomv>
	generateRandom();
 ace:	0a df       	rcall	.-492    	; 0x8e4 <_Z14generateRandomv>
	matrix_to_rgb(2);
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	a6 dc       	rcall	.-1716   	; 0x420 <_Z13matrix_to_rgbb>
	while(1) {		
		_delay_ms(50);
		buttonUp = ~PINA & 0x01;
 ad4:	cc 24       	eor	r12, r12
 ad6:	c3 94       	inc	r12
 ad8:	0f 2e       	mov	r0, r31
 ada:	f9 e2       	ldi	r31, 0x29	; 41
 adc:	af 2e       	mov	r10, r31
 ade:	f1 e0       	ldi	r31, 0x01	; 1
 ae0:	bf 2e       	mov	r11, r31
 ae2:	f0 2d       	mov	r31, r0
		buttonDown = ~PINA & 0x02;
		buttonLeft = ~PINA & 0x04;
		buttonRight = ~PINA & 0x08;
		buttonReset = ~PINA & 0x10;
		_delay_ms(50);
		int size = 0;
 ae4:	71 2c       	mov	r7, r1
 ae6:	61 2c       	mov	r6, r1
	j = size;
	grid[i][j] = 2;
}

int main()
{
 ae8:	68 94       	set
 aea:	99 24       	eor	r9, r9
 aec:	92 f8       	bld	r9, 2
 aee:	81 2c       	mov	r8, r1
		else if (!buttonUp && !buttonDown && !buttonRight && buttonLeft && !buttonReset) {
			pressLeft();
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (grid[i][j] != grid_prev[i][j]) {
						validmove = 1;
 af0:	33 24       	eor	r3, r3
 af2:	33 94       	inc	r3
 af4:	21 2c       	mov	r2, r1
 af6:	83 ed       	ldi	r24, 0xD3	; 211
 af8:	90 e3       	ldi	r25, 0x30	; 48
 afa:	01 97       	sbiw	r24, 0x01	; 1
 afc:	f1 f7       	brne	.-4      	; 0xafa <main+0xa6>
 afe:	00 c0       	rjmp	.+0      	; 0xb00 <main+0xac>
 b00:	00 00       	nop
	generateRandom();
	generateRandom();
	matrix_to_rgb(2);
	while(1) {		
		_delay_ms(50);
		buttonUp = ~PINA & 0x01;
 b02:	10 b1       	in	r17, 0x00	; 0
 b04:	1c 25       	eor	r17, r12
 b06:	11 70       	andi	r17, 0x01	; 1
		buttonDown = ~PINA & 0x02;
 b08:	80 b1       	in	r24, 0x00	; 0
 b0a:	80 95       	com	r24
 b0c:	c8 2f       	mov	r28, r24
 b0e:	c2 70       	andi	r28, 0x02	; 2
		buttonLeft = ~PINA & 0x04;
 b10:	00 b1       	in	r16, 0x00	; 0
 b12:	00 95       	com	r16
 b14:	04 70       	andi	r16, 0x04	; 4
		buttonRight = ~PINA & 0x08;
 b16:	80 b1       	in	r24, 0x00	; 0
 b18:	80 95       	com	r24
 b1a:	d8 2f       	mov	r29, r24
 b1c:	d8 70       	andi	r29, 0x08	; 8
		buttonReset = ~PINA & 0x10;
 b1e:	80 b1       	in	r24, 0x00	; 0
 b20:	80 95       	com	r24
 b22:	80 71       	andi	r24, 0x10	; 16
 b24:	d8 2e       	mov	r13, r24
 b26:	83 ed       	ldi	r24, 0xD3	; 211
 b28:	90 e3       	ldi	r25, 0x30	; 48
 b2a:	01 97       	sbiw	r24, 0x01	; 1
 b2c:	f1 f7       	brne	.-4      	; 0xb2a <main+0xd6>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0xdc>
 b30:	00 00       	nop
 b32:	d5 01       	movw	r26, r10
		_delay_ms(50);
		int size = 0;
 b34:	67 2d       	mov	r22, r7
 b36:	76 2d       	mov	r23, r6
 b38:	10 c0       	rjmp	.+32     	; 0xb5a <main+0x106>
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				if (grid[i][j] == 0) {
 b3a:	41 91       	ld	r20, Z+
 b3c:	51 91       	ld	r21, Z+
 b3e:	45 2b       	or	r20, r21
 b40:	11 f4       	brne	.+4      	; 0xb46 <main+0xf2>
					size++;
 b42:	6f 5f       	subi	r22, 0xFF	; 255
 b44:	7f 4f       	sbci	r23, 0xFF	; 255
 b46:	21 50       	subi	r18, 0x01	; 1
 b48:	31 09       	sbc	r19, r1
		buttonRight = ~PINA & 0x08;
		buttonReset = ~PINA & 0x10;
		_delay_ms(50);
		int size = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
 b4a:	21 15       	cp	r18, r1
 b4c:	31 05       	cpc	r19, r1
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <main+0xe6>
 b50:	18 96       	adiw	r26, 0x08	; 8
		buttonLeft = ~PINA & 0x04;
		buttonRight = ~PINA & 0x08;
		buttonReset = ~PINA & 0x10;
		_delay_ms(50);
		int size = 0;
		for (int i = 0; i < 4; i++) {
 b52:	91 e0       	ldi	r25, 0x01	; 1
 b54:	a9 34       	cpi	r26, 0x49	; 73
 b56:	b9 07       	cpc	r27, r25
 b58:	21 f0       	breq	.+8      	; 0xb62 <main+0x10e>
	j = size;
	grid[i][j] = 2;
}

int main()
{
 b5a:	fd 01       	movw	r30, r26
 b5c:	29 2d       	mov	r18, r9
 b5e:	38 2d       	mov	r19, r8
 b60:	ec cf       	rjmp	.-40     	; 0xb3a <main+0xe6>
				if (grid[i][j] == 0) {
					size++;
				}
			}
		}
		if (size == 0) {
 b62:	67 2b       	or	r22, r23
 b64:	59 f4       	brne	.+22     	; 0xb7c <main+0x128>
			while(!buttonReset) {
 b66:	d1 10       	cpse	r13, r1
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <main+0x128>
				matrix_to_rgb(0);
 b6a:	80 e0       	ldi	r24, 0x00	; 0
 b6c:	59 dc       	rcall	.-1870   	; 0x420 <_Z13matrix_to_rgbb>
				buttonReset = ~PINA & 0x10;		
 b6e:	80 b1       	in	r24, 0x00	; 0
 b70:	80 95       	com	r24
					size++;
				}
			}
		}
		if (size == 0) {
			while(!buttonReset) {
 b72:	28 2f       	mov	r18, r24
 b74:	20 71       	andi	r18, 0x10	; 16
 b76:	d2 2e       	mov	r13, r18
 b78:	84 ff       	sbrs	r24, 4
 b7a:	f7 cf       	rjmp	.-18     	; 0xb6a <main+0x116>
				matrix_to_rgb(0);
				buttonReset = ~PINA & 0x10;		
			}
		}
		if (buttonUp && !buttonDown && !buttonRight && !buttonLeft && !buttonReset) {
 b7c:	11 23       	and	r17, r17
 b7e:	09 f4       	brne	.+2      	; 0xb82 <main+0x12e>
 b80:	3b c0       	rjmp	.+118    	; 0xbf8 <main+0x1a4>
 b82:	c1 11       	cpse	r28, r1
 b84:	f2 c0       	rjmp	.+484    	; 0xd6a <main+0x316>
 b86:	d1 11       	cpse	r29, r1
 b88:	f0 c0       	rjmp	.+480    	; 0xd6a <main+0x316>
 b8a:	01 11       	cpse	r16, r1
 b8c:	ee c0       	rjmp	.+476    	; 0xd6a <main+0x316>
 b8e:	d1 10       	cpse	r13, r1
 b90:	ec c0       	rjmp	.+472    	; 0xd6a <main+0x316>
			pressUp();
 b92:	9c de       	rcall	.-712    	; 0x8cc <_Z7pressUpv>
 b94:	40 90 05 01 	lds	r4, 0x0105
 b98:	50 90 06 01 	lds	r5, 0x0106
 b9c:	47 2d       	mov	r20, r7
 b9e:	56 2d       	mov	r21, r6
 ba0:	13 c0       	rjmp	.+38     	; 0xbc8 <main+0x174>
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (grid[i][j] != grid_prev[i][j]) {
 ba2:	21 91       	ld	r18, Z+
 ba4:	31 91       	ld	r19, Z+
 ba6:	8d 91       	ld	r24, X+
 ba8:	9d 91       	ld	r25, X+
 baa:	28 17       	cp	r18, r24
 bac:	39 07       	cpc	r19, r25
 bae:	11 f0       	breq	.+4      	; 0xbb4 <main+0x160>
						validmove = 1;
 bb0:	43 2c       	mov	r4, r3
 bb2:	52 2c       	mov	r5, r2
 bb4:	61 50       	subi	r22, 0x01	; 1
 bb6:	71 09       	sbc	r23, r1
			}
		}
		if (buttonUp && !buttonDown && !buttonRight && !buttonLeft && !buttonReset) {
			pressUp();
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
 bb8:	61 15       	cp	r22, r1
 bba:	71 05       	cpc	r23, r1
 bbc:	91 f7       	brne	.-28     	; 0xba2 <main+0x14e>
 bbe:	48 5f       	subi	r20, 0xF8	; 248
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255
				buttonReset = ~PINA & 0x10;		
			}
		}
		if (buttonUp && !buttonDown && !buttonRight && !buttonLeft && !buttonReset) {
			pressUp();
			for (int i = 0; i < 4; i++) {
 bc2:	40 32       	cpi	r20, 0x20	; 32
 bc4:	51 05       	cpc	r21, r1
 bc6:	49 f0       	breq	.+18     	; 0xbda <main+0x186>
 bc8:	da 01       	movw	r26, r20
 bca:	a7 5f       	subi	r26, 0xF7	; 247
 bcc:	be 4f       	sbci	r27, 0xFE	; 254
		buttonDown = ~PINA & 0x02;
		buttonLeft = ~PINA & 0x04;
		buttonRight = ~PINA & 0x08;
		buttonReset = ~PINA & 0x10;
		_delay_ms(50);
		int size = 0;
 bce:	f5 01       	movw	r30, r10
 bd0:	e4 0f       	add	r30, r20
 bd2:	f5 1f       	adc	r31, r21
 bd4:	69 2d       	mov	r22, r9
 bd6:	78 2d       	mov	r23, r8
 bd8:	e4 cf       	rjmp	.-56     	; 0xba2 <main+0x14e>
 bda:	50 92 06 01 	sts	0x0106, r5
 bde:	40 92 05 01 	sts	0x0105, r4
					if (grid[i][j] != grid_prev[i][j]) {
						validmove = 1;
					}
				}
			}
			if (validmove == 1) {
 be2:	4a 94       	dec	r4
 be4:	45 28       	or	r4, r5
 be6:	29 f4       	brne	.+10     	; 0xbf2 <main+0x19e>
				generateRandom();
 be8:	7d de       	rcall	.-774    	; 0x8e4 <_Z14generateRandomv>
				validmove = 0;
 bea:	70 92 05 01 	sts	0x0105, r7
 bee:	60 92 06 01 	sts	0x0106, r6
			}
			matrix_to_rgb(2);
 bf2:	8c 2d       	mov	r24, r12
 bf4:	15 dc       	rcall	.-2006   	; 0x420 <_Z13matrix_to_rgbb>
 bf6:	b9 c0       	rjmp	.+370    	; 0xd6a <main+0x316>
		}
		else if (!buttonUp && buttonDown && !buttonRight && !buttonLeft && !buttonReset) {
 bf8:	cc 23       	and	r28, r28
 bfa:	09 f4       	brne	.+2      	; 0xbfe <main+0x1aa>
 bfc:	39 c0       	rjmp	.+114    	; 0xc70 <main+0x21c>
 bfe:	d1 11       	cpse	r29, r1
 c00:	b4 c0       	rjmp	.+360    	; 0xd6a <main+0x316>
 c02:	01 11       	cpse	r16, r1
 c04:	b2 c0       	rjmp	.+356    	; 0xd6a <main+0x316>
 c06:	d1 10       	cpse	r13, r1
 c08:	b0 c0       	rjmp	.+352    	; 0xd6a <main+0x316>
			pressDown();
 c0a:	64 de       	rcall	.-824    	; 0x8d4 <_Z9pressDownv>
 c0c:	40 90 05 01 	lds	r4, 0x0105
 c10:	50 90 06 01 	lds	r5, 0x0106
 c14:	47 2d       	mov	r20, r7
 c16:	56 2d       	mov	r21, r6
 c18:	13 c0       	rjmp	.+38     	; 0xc40 <main+0x1ec>
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (grid[i][j] != grid_prev[i][j]) {
 c1a:	21 91       	ld	r18, Z+
 c1c:	31 91       	ld	r19, Z+
 c1e:	8d 91       	ld	r24, X+
 c20:	9d 91       	ld	r25, X+
 c22:	28 17       	cp	r18, r24
 c24:	39 07       	cpc	r19, r25
 c26:	11 f0       	breq	.+4      	; 0xc2c <main+0x1d8>
						validmove = 1;
 c28:	43 2c       	mov	r4, r3
 c2a:	52 2c       	mov	r5, r2
 c2c:	61 50       	subi	r22, 0x01	; 1
 c2e:	71 09       	sbc	r23, r1
			matrix_to_rgb(2);
		}
		else if (!buttonUp && buttonDown && !buttonRight && !buttonLeft && !buttonReset) {
			pressDown();
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
 c30:	61 15       	cp	r22, r1
 c32:	71 05       	cpc	r23, r1
 c34:	91 f7       	brne	.-28     	; 0xc1a <main+0x1c6>
 c36:	48 5f       	subi	r20, 0xF8	; 248
 c38:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			matrix_to_rgb(2);
		}
		else if (!buttonUp && buttonDown && !buttonRight && !buttonLeft && !buttonReset) {
			pressDown();
			for (int i = 0; i < 4; i++) {
 c3a:	40 32       	cpi	r20, 0x20	; 32
 c3c:	51 05       	cpc	r21, r1
 c3e:	49 f0       	breq	.+18     	; 0xc52 <main+0x1fe>
 c40:	da 01       	movw	r26, r20
 c42:	a7 5f       	subi	r26, 0xF7	; 247
 c44:	be 4f       	sbci	r27, 0xFE	; 254
 c46:	f5 01       	movw	r30, r10
 c48:	e4 0f       	add	r30, r20
 c4a:	f5 1f       	adc	r31, r21
 c4c:	69 2d       	mov	r22, r9
 c4e:	78 2d       	mov	r23, r8
 c50:	e4 cf       	rjmp	.-56     	; 0xc1a <main+0x1c6>
 c52:	50 92 06 01 	sts	0x0106, r5
 c56:	40 92 05 01 	sts	0x0105, r4
					if (grid[i][j] != grid_prev[i][j]) {
						validmove = 1;
					}
				}
			}
			if (validmove == 1) {
 c5a:	4a 94       	dec	r4
 c5c:	45 28       	or	r4, r5
 c5e:	29 f4       	brne	.+10     	; 0xc6a <main+0x216>
				generateRandom();
 c60:	41 de       	rcall	.-894    	; 0x8e4 <_Z14generateRandomv>
				validmove = 0;
 c62:	70 92 05 01 	sts	0x0105, r7
 c66:	60 92 06 01 	sts	0x0106, r6
			}
			matrix_to_rgb(2);
 c6a:	8c 2d       	mov	r24, r12
 c6c:	d9 db       	rcall	.-2126   	; 0x420 <_Z13matrix_to_rgbb>
 c6e:	7d c0       	rjmp	.+250    	; 0xd6a <main+0x316>
		}
		else if (!buttonUp && !buttonDown && buttonRight && !buttonLeft && !buttonReset) {
 c70:	dd 23       	and	r29, r29
 c72:	b9 f1       	breq	.+110    	; 0xce2 <main+0x28e>
 c74:	01 11       	cpse	r16, r1
 c76:	79 c0       	rjmp	.+242    	; 0xd6a <main+0x316>
 c78:	d1 10       	cpse	r13, r1
 c7a:	77 c0       	rjmp	.+238    	; 0xd6a <main+0x316>
			pressRight();
 c7c:	2f de       	rcall	.-930    	; 0x8dc <_Z10pressRightv>
 c7e:	40 90 05 01 	lds	r4, 0x0105
 c82:	50 90 06 01 	lds	r5, 0x0106
 c86:	47 2d       	mov	r20, r7
 c88:	56 2d       	mov	r21, r6
 c8a:	13 c0       	rjmp	.+38     	; 0xcb2 <main+0x25e>
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (grid[i][j] != grid_prev[i][j])
 c8c:	21 91       	ld	r18, Z+
 c8e:	31 91       	ld	r19, Z+
 c90:	8d 91       	ld	r24, X+
 c92:	9d 91       	ld	r25, X+
 c94:	28 17       	cp	r18, r24
 c96:	39 07       	cpc	r19, r25
 c98:	11 f0       	breq	.+4      	; 0xc9e <main+0x24a>
					{
						validmove = 1;
 c9a:	43 2c       	mov	r4, r3
 c9c:	52 2c       	mov	r5, r2
 c9e:	61 50       	subi	r22, 0x01	; 1
 ca0:	71 09       	sbc	r23, r1
			matrix_to_rgb(2);
		}
		else if (!buttonUp && !buttonDown && buttonRight && !buttonLeft && !buttonReset) {
			pressRight();
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
 ca2:	61 15       	cp	r22, r1
 ca4:	71 05       	cpc	r23, r1
 ca6:	91 f7       	brne	.-28     	; 0xc8c <main+0x238>
 ca8:	48 5f       	subi	r20, 0xF8	; 248
 caa:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			matrix_to_rgb(2);
		}
		else if (!buttonUp && !buttonDown && buttonRight && !buttonLeft && !buttonReset) {
			pressRight();
			for (int i = 0; i < 4; i++) {
 cac:	40 32       	cpi	r20, 0x20	; 32
 cae:	51 05       	cpc	r21, r1
 cb0:	49 f0       	breq	.+18     	; 0xcc4 <main+0x270>
 cb2:	da 01       	movw	r26, r20
 cb4:	a7 5f       	subi	r26, 0xF7	; 247
 cb6:	be 4f       	sbci	r27, 0xFE	; 254
 cb8:	f5 01       	movw	r30, r10
 cba:	e4 0f       	add	r30, r20
 cbc:	f5 1f       	adc	r31, r21
 cbe:	69 2d       	mov	r22, r9
 cc0:	78 2d       	mov	r23, r8
 cc2:	e4 cf       	rjmp	.-56     	; 0xc8c <main+0x238>
 cc4:	50 92 06 01 	sts	0x0106, r5
 cc8:	40 92 05 01 	sts	0x0105, r4
					{
						validmove = 1;
					}
				}
			}
			if (validmove == 1) {
 ccc:	4a 94       	dec	r4
 cce:	45 28       	or	r4, r5
 cd0:	29 f4       	brne	.+10     	; 0xcdc <main+0x288>
				generateRandom();
 cd2:	08 de       	rcall	.-1008   	; 0x8e4 <_Z14generateRandomv>
				validmove = 0;
 cd4:	70 92 05 01 	sts	0x0105, r7
 cd8:	60 92 06 01 	sts	0x0106, r6
			}
			matrix_to_rgb(2);
 cdc:	8c 2d       	mov	r24, r12
 cde:	a0 db       	rcall	.-2240   	; 0x420 <_Z13matrix_to_rgbb>
 ce0:	44 c0       	rjmp	.+136    	; 0xd6a <main+0x316>
		}
		else if (!buttonUp && !buttonDown && !buttonRight && buttonLeft && !buttonReset) {
 ce2:	00 23       	and	r16, r16
 ce4:	a9 f1       	breq	.+106    	; 0xd50 <main+0x2fc>
 ce6:	d1 10       	cpse	r13, r1
 ce8:	40 c0       	rjmp	.+128    	; 0xd6a <main+0x316>
			pressLeft();
 cea:	ec dd       	rcall	.-1064   	; 0x8c4 <_Z9pressLeftv>
 cec:	40 90 05 01 	lds	r4, 0x0105
 cf0:	50 90 06 01 	lds	r5, 0x0106
 cf4:	47 2d       	mov	r20, r7
 cf6:	56 2d       	mov	r21, r6
 cf8:	13 c0       	rjmp	.+38     	; 0xd20 <main+0x2cc>
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (grid[i][j] != grid_prev[i][j]) {
 cfa:	21 91       	ld	r18, Z+
 cfc:	31 91       	ld	r19, Z+
 cfe:	8d 91       	ld	r24, X+
 d00:	9d 91       	ld	r25, X+
 d02:	28 17       	cp	r18, r24
 d04:	39 07       	cpc	r19, r25
 d06:	11 f0       	breq	.+4      	; 0xd0c <main+0x2b8>
						validmove = 1;
 d08:	43 2c       	mov	r4, r3
 d0a:	52 2c       	mov	r5, r2
 d0c:	61 50       	subi	r22, 0x01	; 1
 d0e:	71 09       	sbc	r23, r1
			matrix_to_rgb(2);
		}
		else if (!buttonUp && !buttonDown && !buttonRight && buttonLeft && !buttonReset) {
			pressLeft();
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
 d10:	61 15       	cp	r22, r1
 d12:	71 05       	cpc	r23, r1
 d14:	91 f7       	brne	.-28     	; 0xcfa <main+0x2a6>
 d16:	48 5f       	subi	r20, 0xF8	; 248
 d18:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			matrix_to_rgb(2);
		}
		else if (!buttonUp && !buttonDown && !buttonRight && buttonLeft && !buttonReset) {
			pressLeft();
			for (int i = 0; i < 4; i++) {
 d1a:	40 32       	cpi	r20, 0x20	; 32
 d1c:	51 05       	cpc	r21, r1
 d1e:	49 f0       	breq	.+18     	; 0xd32 <main+0x2de>
 d20:	da 01       	movw	r26, r20
 d22:	a7 5f       	subi	r26, 0xF7	; 247
 d24:	be 4f       	sbci	r27, 0xFE	; 254
 d26:	f5 01       	movw	r30, r10
 d28:	e4 0f       	add	r30, r20
 d2a:	f5 1f       	adc	r31, r21
 d2c:	69 2d       	mov	r22, r9
 d2e:	78 2d       	mov	r23, r8
 d30:	e4 cf       	rjmp	.-56     	; 0xcfa <main+0x2a6>
 d32:	50 92 06 01 	sts	0x0106, r5
 d36:	40 92 05 01 	sts	0x0105, r4
					if (grid[i][j] != grid_prev[i][j]) {
						validmove = 1;
					}
				}
			}
			if (validmove == 1) {
 d3a:	4a 94       	dec	r4
 d3c:	45 28       	or	r4, r5
 d3e:	29 f4       	brne	.+10     	; 0xd4a <main+0x2f6>
				generateRandom();
 d40:	d1 dd       	rcall	.-1118   	; 0x8e4 <_Z14generateRandomv>
				validmove = 0;
 d42:	70 92 05 01 	sts	0x0105, r7
 d46:	60 92 06 01 	sts	0x0106, r6
			}
			matrix_to_rgb(2);
 d4a:	8c 2d       	mov	r24, r12
 d4c:	69 db       	rcall	.-2350   	; 0x420 <_Z13matrix_to_rgbb>
 d4e:	0d c0       	rjmp	.+26     	; 0xd6a <main+0x316>
		}
		else if (!buttonUp && !buttonDown && !buttonRight && !buttonLeft && buttonReset) {
 d50:	dd 20       	and	r13, r13
 d52:	59 f0       	breq	.+22     	; 0xd6a <main+0x316>
			initializeGrid();
 d54:	c5 db       	rcall	.-2166   	; 0x4e0 <_Z14initializeGridv>
			generateRandom();
 d56:	c6 dd       	rcall	.-1140   	; 0x8e4 <_Z14generateRandomv>
			generateRandom();
 d58:	c5 dd       	rcall	.-1142   	; 0x8e4 <_Z14generateRandomv>
			matrix_to_rgb(2);
 d5a:	8c 2d       	mov	r24, r12
 d5c:	61 db       	rcall	.-2366   	; 0x420 <_Z13matrix_to_rgbb>
 d5e:	83 ed       	ldi	r24, 0xD3	; 211
 d60:	90 e3       	ldi	r25, 0x30	; 48
 d62:	01 97       	sbiw	r24, 0x01	; 1
 d64:	f1 f7       	brne	.-4      	; 0xd62 <main+0x30e>
 d66:	00 c0       	rjmp	.+0      	; 0xd68 <main+0x314>
 d68:	00 00       	nop
 d6a:	83 ed       	ldi	r24, 0xD3	; 211
 d6c:	90 e3       	ldi	r25, 0x30	; 48
 d6e:	01 97       	sbiw	r24, 0x01	; 1
 d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x31a>
 d72:	00 c0       	rjmp	.+0      	; 0xd74 <main+0x320>
 d74:	00 00       	nop
 d76:	15 c0       	rjmp	.+42     	; 0xda2 <main+0x34e>
			_delay_ms(50);
		}
		_delay_ms(50);
		while (buttonUp || buttonLeft || buttonRight || buttonDown || buttonReset) {
			buttonUp = ~PINA & 0x01;
 d78:	10 b1       	in	r17, 0x00	; 0
 d7a:	1c 25       	eor	r17, r12
 d7c:	11 70       	andi	r17, 0x01	; 1
			buttonDown = ~PINA & 0x02;
 d7e:	e0 b0       	in	r14, 0x00	; 0
 d80:	8e 2d       	mov	r24, r14
 d82:	80 95       	com	r24
 d84:	c8 2f       	mov	r28, r24
 d86:	c2 70       	andi	r28, 0x02	; 2
			buttonLeft = ~PINA & 0x04;
 d88:	00 b1       	in	r16, 0x00	; 0
 d8a:	00 95       	com	r16
 d8c:	04 70       	andi	r16, 0x04	; 4
			buttonRight = ~PINA & 0x08;
 d8e:	f0 b0       	in	r15, 0x00	; 0
 d90:	8f 2d       	mov	r24, r15
 d92:	80 95       	com	r24
 d94:	d8 2f       	mov	r29, r24
 d96:	d8 70       	andi	r29, 0x08	; 8
			buttonReset = ~PINA & 0x10;
 d98:	d0 b0       	in	r13, 0x00	; 0
 d9a:	8d 2d       	mov	r24, r13
 d9c:	80 95       	com	r24
 d9e:	80 71       	andi	r24, 0x10	; 16
 da0:	d8 2e       	mov	r13, r24
			generateRandom();
			matrix_to_rgb(2);
			_delay_ms(50);
		}
		_delay_ms(50);
		while (buttonUp || buttonLeft || buttonRight || buttonDown || buttonReset) {
 da2:	11 11       	cpse	r17, r1
 da4:	e9 cf       	rjmp	.-46     	; 0xd78 <main+0x324>
 da6:	01 11       	cpse	r16, r1
 da8:	e7 cf       	rjmp	.-50     	; 0xd78 <main+0x324>
 daa:	d1 11       	cpse	r29, r1
 dac:	e5 cf       	rjmp	.-54     	; 0xd78 <main+0x324>
 dae:	c1 11       	cpse	r28, r1
 db0:	e3 cf       	rjmp	.-58     	; 0xd78 <main+0x324>
 db2:	d1 10       	cpse	r13, r1
 db4:	e1 cf       	rjmp	.-62     	; 0xd78 <main+0x324>
			buttonDown = ~PINA & 0x02;
			buttonLeft = ~PINA & 0x04;
			buttonRight = ~PINA & 0x08;
			buttonReset = ~PINA & 0x10;
		}
		checkWin();
 db6:	6b db       	rcall	.-2346   	; 0x48e <_Z8checkWinv>
		if (wonGame == 1) {
 db8:	80 91 07 01 	lds	r24, 0x0107
 dbc:	90 91 08 01 	lds	r25, 0x0108
 dc0:	01 97       	sbiw	r24, 0x01	; 1
 dc2:	89 f4       	brne	.+34     	; 0xde6 <main+0x392>
			wonGame = 0;
 dc4:	70 92 07 01 	sts	0x0107, r7
 dc8:	60 92 08 01 	sts	0x0108, r6
			while (!buttonReset) {
				matrix_to_rgb(1);
 dcc:	8c 2d       	mov	r24, r12
 dce:	28 db       	rcall	.-2480   	; 0x420 <_Z13matrix_to_rgbb>
 dd0:	9f eb       	ldi	r25, 0xBF	; 191
 dd2:	27 e2       	ldi	r18, 0x27	; 39
 dd4:	89 e0       	ldi	r24, 0x09	; 9
 dd6:	91 50       	subi	r25, 0x01	; 1
 dd8:	20 40       	sbci	r18, 0x00	; 0
 dda:	80 40       	sbci	r24, 0x00	; 0
 ddc:	e1 f7       	brne	.-8      	; 0xdd6 <main+0x382>
 dde:	00 c0       	rjmp	.+0      	; 0xde0 <main+0x38c>
 de0:	00 00       	nop
			buttonReset = ~PINA & 0x10;
		}
		checkWin();
		if (wonGame == 1) {
			wonGame = 0;
			while (!buttonReset) {
 de2:	04 99       	sbic	0x00, 4	; 0
 de4:	f3 cf       	rjmp	.-26     	; 0xdcc <main+0x378>
 de6:	83 ed       	ldi	r24, 0xD3	; 211
 de8:	90 e3       	ldi	r25, 0x30	; 48
 dea:	01 97       	sbiw	r24, 0x01	; 1
 dec:	f1 f7       	brne	.-4      	; 0xdea <main+0x396>
 dee:	00 c0       	rjmp	.+0      	; 0xdf0 <main+0x39c>
 df0:	00 00       	nop
 df2:	81 ce       	rjmp	.-766    	; 0xaf6 <main+0xa2>

00000df4 <_GLOBAL__sub_I__ZN7TLC5940C2Ev>:
			gs[led] = 4095;
		}
	}
}
// tlc object
TLC5940 tlc;
 df4:	8a e4       	ldi	r24, 0x4A	; 74
 df6:	91 e0       	ldi	r25, 0x01	; 1
 df8:	77 c9       	rjmp	.-3346   	; 0xe8 <_ZN7TLC5940C1Ev>
 dfa:	08 95       	ret

00000dfc <__divmodhi4>:
 dfc:	97 fb       	bst	r25, 7
 dfe:	07 2e       	mov	r0, r23
 e00:	16 f4       	brtc	.+4      	; 0xe06 <__divmodhi4+0xa>
 e02:	00 94       	com	r0
 e04:	06 d0       	rcall	.+12     	; 0xe12 <__divmodhi4_neg1>
 e06:	77 fd       	sbrc	r23, 7
 e08:	08 d0       	rcall	.+16     	; 0xe1a <__divmodhi4_neg2>
 e0a:	1e d0       	rcall	.+60     	; 0xe48 <__udivmodhi4>
 e0c:	07 fc       	sbrc	r0, 7
 e0e:	05 d0       	rcall	.+10     	; 0xe1a <__divmodhi4_neg2>
 e10:	3e f4       	brtc	.+14     	; 0xe20 <__divmodhi4_exit>

00000e12 <__divmodhi4_neg1>:
 e12:	90 95       	com	r25
 e14:	81 95       	neg	r24
 e16:	9f 4f       	sbci	r25, 0xFF	; 255
 e18:	08 95       	ret

00000e1a <__divmodhi4_neg2>:
 e1a:	70 95       	com	r23
 e1c:	61 95       	neg	r22
 e1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e20 <__divmodhi4_exit>:
 e20:	08 95       	ret

00000e22 <__umulhisi3>:
 e22:	a2 9f       	mul	r26, r18
 e24:	b0 01       	movw	r22, r0
 e26:	b3 9f       	mul	r27, r19
 e28:	c0 01       	movw	r24, r0
 e2a:	a3 9f       	mul	r26, r19
 e2c:	70 0d       	add	r23, r0
 e2e:	81 1d       	adc	r24, r1
 e30:	11 24       	eor	r1, r1
 e32:	91 1d       	adc	r25, r1
 e34:	b2 9f       	mul	r27, r18
 e36:	70 0d       	add	r23, r0
 e38:	81 1d       	adc	r24, r1
 e3a:	11 24       	eor	r1, r1
 e3c:	91 1d       	adc	r25, r1
 e3e:	08 95       	ret

00000e40 <__tablejump_elpm__>:
 e40:	07 90       	elpm	r0, Z+
 e42:	f6 91       	elpm	r31, Z
 e44:	e0 2d       	mov	r30, r0
 e46:	09 94       	ijmp

00000e48 <__udivmodhi4>:
 e48:	aa 1b       	sub	r26, r26
 e4a:	bb 1b       	sub	r27, r27
 e4c:	51 e1       	ldi	r21, 0x11	; 17
 e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__udivmodhi4_ep>

00000e50 <__udivmodhi4_loop>:
 e50:	aa 1f       	adc	r26, r26
 e52:	bb 1f       	adc	r27, r27
 e54:	a6 17       	cp	r26, r22
 e56:	b7 07       	cpc	r27, r23
 e58:	10 f0       	brcs	.+4      	; 0xe5e <__udivmodhi4_ep>
 e5a:	a6 1b       	sub	r26, r22
 e5c:	b7 0b       	sbc	r27, r23

00000e5e <__udivmodhi4_ep>:
 e5e:	88 1f       	adc	r24, r24
 e60:	99 1f       	adc	r25, r25
 e62:	5a 95       	dec	r21
 e64:	a9 f7       	brne	.-22     	; 0xe50 <__udivmodhi4_loop>
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	bc 01       	movw	r22, r24
 e6c:	cd 01       	movw	r24, r26
 e6e:	08 95       	ret

00000e70 <do_rand>:
 e70:	8f 92       	push	r8
 e72:	9f 92       	push	r9
 e74:	af 92       	push	r10
 e76:	bf 92       	push	r11
 e78:	cf 92       	push	r12
 e7a:	df 92       	push	r13
 e7c:	ef 92       	push	r14
 e7e:	ff 92       	push	r15
 e80:	cf 93       	push	r28
 e82:	df 93       	push	r29
 e84:	ec 01       	movw	r28, r24
 e86:	68 81       	ld	r22, Y
 e88:	79 81       	ldd	r23, Y+1	; 0x01
 e8a:	8a 81       	ldd	r24, Y+2	; 0x02
 e8c:	9b 81       	ldd	r25, Y+3	; 0x03
 e8e:	61 15       	cp	r22, r1
 e90:	71 05       	cpc	r23, r1
 e92:	81 05       	cpc	r24, r1
 e94:	91 05       	cpc	r25, r1
 e96:	21 f4       	brne	.+8      	; 0xea0 <do_rand+0x30>
 e98:	64 e2       	ldi	r22, 0x24	; 36
 e9a:	79 ed       	ldi	r23, 0xD9	; 217
 e9c:	8b e5       	ldi	r24, 0x5B	; 91
 e9e:	97 e0       	ldi	r25, 0x07	; 7
 ea0:	2d e1       	ldi	r18, 0x1D	; 29
 ea2:	33 ef       	ldi	r19, 0xF3	; 243
 ea4:	41 e0       	ldi	r20, 0x01	; 1
 ea6:	50 e0       	ldi	r21, 0x00	; 0
 ea8:	3a d0       	rcall	.+116    	; 0xf1e <__divmodsi4>
 eaa:	49 01       	movw	r8, r18
 eac:	5a 01       	movw	r10, r20
 eae:	9b 01       	movw	r18, r22
 eb0:	ac 01       	movw	r20, r24
 eb2:	a7 ea       	ldi	r26, 0xA7	; 167
 eb4:	b1 e4       	ldi	r27, 0x41	; 65
 eb6:	4f d0       	rcall	.+158    	; 0xf56 <__muluhisi3>
 eb8:	6b 01       	movw	r12, r22
 eba:	7c 01       	movw	r14, r24
 ebc:	ac ee       	ldi	r26, 0xEC	; 236
 ebe:	b4 ef       	ldi	r27, 0xF4	; 244
 ec0:	a5 01       	movw	r20, r10
 ec2:	94 01       	movw	r18, r8
 ec4:	54 d0       	rcall	.+168    	; 0xf6e <__mulohisi3>
 ec6:	c6 0e       	add	r12, r22
 ec8:	d7 1e       	adc	r13, r23
 eca:	e8 1e       	adc	r14, r24
 ecc:	f9 1e       	adc	r15, r25
 ece:	f7 fe       	sbrs	r15, 7
 ed0:	06 c0       	rjmp	.+12     	; 0xede <do_rand+0x6e>
 ed2:	81 e0       	ldi	r24, 0x01	; 1
 ed4:	c8 1a       	sub	r12, r24
 ed6:	d1 08       	sbc	r13, r1
 ed8:	e1 08       	sbc	r14, r1
 eda:	80 e8       	ldi	r24, 0x80	; 128
 edc:	f8 0a       	sbc	r15, r24
 ede:	c8 82       	st	Y, r12
 ee0:	d9 82       	std	Y+1, r13	; 0x01
 ee2:	ea 82       	std	Y+2, r14	; 0x02
 ee4:	fb 82       	std	Y+3, r15	; 0x03
 ee6:	c6 01       	movw	r24, r12
 ee8:	9f 77       	andi	r25, 0x7F	; 127
 eea:	df 91       	pop	r29
 eec:	cf 91       	pop	r28
 eee:	ff 90       	pop	r15
 ef0:	ef 90       	pop	r14
 ef2:	df 90       	pop	r13
 ef4:	cf 90       	pop	r12
 ef6:	bf 90       	pop	r11
 ef8:	af 90       	pop	r10
 efa:	9f 90       	pop	r9
 efc:	8f 90       	pop	r8
 efe:	08 95       	ret

00000f00 <rand_r>:
 f00:	b7 cf       	rjmp	.-146    	; 0xe70 <do_rand>

00000f02 <rand>:
 f02:	80 e0       	ldi	r24, 0x00	; 0
 f04:	91 e0       	ldi	r25, 0x01	; 1
 f06:	b4 cf       	rjmp	.-152    	; 0xe70 <do_rand>

00000f08 <srand>:
 f08:	a0 e0       	ldi	r26, 0x00	; 0
 f0a:	b0 e0       	ldi	r27, 0x00	; 0
 f0c:	80 93 00 01 	sts	0x0100, r24
 f10:	90 93 01 01 	sts	0x0101, r25
 f14:	a0 93 02 01 	sts	0x0102, r26
 f18:	b0 93 03 01 	sts	0x0103, r27
 f1c:	08 95       	ret

00000f1e <__divmodsi4>:
 f1e:	05 2e       	mov	r0, r21
 f20:	97 fb       	bst	r25, 7
 f22:	16 f4       	brtc	.+4      	; 0xf28 <__divmodsi4+0xa>
 f24:	00 94       	com	r0
 f26:	0f d0       	rcall	.+30     	; 0xf46 <__negsi2>
 f28:	57 fd       	sbrc	r21, 7
 f2a:	05 d0       	rcall	.+10     	; 0xf36 <__divmodsi4_neg2>
 f2c:	24 d0       	rcall	.+72     	; 0xf76 <__udivmodsi4>
 f2e:	07 fc       	sbrc	r0, 7
 f30:	02 d0       	rcall	.+4      	; 0xf36 <__divmodsi4_neg2>
 f32:	46 f4       	brtc	.+16     	; 0xf44 <__divmodsi4_exit>
 f34:	08 c0       	rjmp	.+16     	; 0xf46 <__negsi2>

00000f36 <__divmodsi4_neg2>:
 f36:	50 95       	com	r21
 f38:	40 95       	com	r20
 f3a:	30 95       	com	r19
 f3c:	21 95       	neg	r18
 f3e:	3f 4f       	sbci	r19, 0xFF	; 255
 f40:	4f 4f       	sbci	r20, 0xFF	; 255
 f42:	5f 4f       	sbci	r21, 0xFF	; 255

00000f44 <__divmodsi4_exit>:
 f44:	08 95       	ret

00000f46 <__negsi2>:
 f46:	90 95       	com	r25
 f48:	80 95       	com	r24
 f4a:	70 95       	com	r23
 f4c:	61 95       	neg	r22
 f4e:	7f 4f       	sbci	r23, 0xFF	; 255
 f50:	8f 4f       	sbci	r24, 0xFF	; 255
 f52:	9f 4f       	sbci	r25, 0xFF	; 255
 f54:	08 95       	ret

00000f56 <__muluhisi3>:
 f56:	65 df       	rcall	.-310    	; 0xe22 <__umulhisi3>
 f58:	a5 9f       	mul	r26, r21
 f5a:	90 0d       	add	r25, r0
 f5c:	b4 9f       	mul	r27, r20
 f5e:	90 0d       	add	r25, r0
 f60:	a4 9f       	mul	r26, r20
 f62:	80 0d       	add	r24, r0
 f64:	91 1d       	adc	r25, r1
 f66:	11 24       	eor	r1, r1
 f68:	08 95       	ret

00000f6a <__mulshisi3>:
 f6a:	b7 ff       	sbrs	r27, 7
 f6c:	f4 cf       	rjmp	.-24     	; 0xf56 <__muluhisi3>

00000f6e <__mulohisi3>:
 f6e:	f3 df       	rcall	.-26     	; 0xf56 <__muluhisi3>
 f70:	82 1b       	sub	r24, r18
 f72:	93 0b       	sbc	r25, r19
 f74:	08 95       	ret

00000f76 <__udivmodsi4>:
 f76:	a1 e2       	ldi	r26, 0x21	; 33
 f78:	1a 2e       	mov	r1, r26
 f7a:	aa 1b       	sub	r26, r26
 f7c:	bb 1b       	sub	r27, r27
 f7e:	fd 01       	movw	r30, r26
 f80:	0d c0       	rjmp	.+26     	; 0xf9c <__udivmodsi4_ep>

00000f82 <__udivmodsi4_loop>:
 f82:	aa 1f       	adc	r26, r26
 f84:	bb 1f       	adc	r27, r27
 f86:	ee 1f       	adc	r30, r30
 f88:	ff 1f       	adc	r31, r31
 f8a:	a2 17       	cp	r26, r18
 f8c:	b3 07       	cpc	r27, r19
 f8e:	e4 07       	cpc	r30, r20
 f90:	f5 07       	cpc	r31, r21
 f92:	20 f0       	brcs	.+8      	; 0xf9c <__udivmodsi4_ep>
 f94:	a2 1b       	sub	r26, r18
 f96:	b3 0b       	sbc	r27, r19
 f98:	e4 0b       	sbc	r30, r20
 f9a:	f5 0b       	sbc	r31, r21

00000f9c <__udivmodsi4_ep>:
 f9c:	66 1f       	adc	r22, r22
 f9e:	77 1f       	adc	r23, r23
 fa0:	88 1f       	adc	r24, r24
 fa2:	99 1f       	adc	r25, r25
 fa4:	1a 94       	dec	r1
 fa6:	69 f7       	brne	.-38     	; 0xf82 <__udivmodsi4_loop>
 fa8:	60 95       	com	r22
 faa:	70 95       	com	r23
 fac:	80 95       	com	r24
 fae:	90 95       	com	r25
 fb0:	9b 01       	movw	r18, r22
 fb2:	ac 01       	movw	r20, r24
 fb4:	bd 01       	movw	r22, r26
 fb6:	cf 01       	movw	r24, r30
 fb8:	08 95       	ret

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
